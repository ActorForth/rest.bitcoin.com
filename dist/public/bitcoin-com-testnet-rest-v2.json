{
	"components": {
		"schemas": {
			"Address": {
				"type": "string"
			},
			"Addresses": {
				"type": "object",
				"properties": {
					"addresses": {
						"type": "array",
						"items": {
							"$ref": "#/components/schemas/Address"
						},
						"example": [
							"bchtest:qzjtnzcvzxx7s0na88yrg3zl28wwvfp97538sgrrmr",
							"bchtest:qp6hgvevf4gzz6l7pgcte3gaaud9km0l459fa23dul"
						]
					}
				}
			},
			"AddressDetails": {
				"type": "object",
				"properties": {
					"balance": {
						"type": "number",
						"format": "float"
					},
					"balanceSat": {
						"type": "number",
						"format": "float"
					},
					"totalReceived": {
						"type": "number",
						"format": "float"
					},
					"totalReceivedSat": {
						"type": "number",
						"format": "float"
					},
					"totalSent": {
						"type": "number",
						"format": "float"
					},
					"totalSentSat": {
						"type": "number",
						"format": "float"
					},
					"unconfirmedBalance": {
						"type": "number",
						"format": "float"
					},
					"unconfirmedBalanceSat": {
						"type": "number",
						"format": "float"
					},
					"unconfirmedTxApperances": {
						"type": "number",
						"format": "float"
					},
					"txApperances": {
						"type": "number"
					},
					"transactions": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"legacyAddress": {
						"type": "string"
					},
					"cashAddress": {
						"type": "string"
					}
				}
			},
			"AddressDetailsArray": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/AddressDetails"
				}
			},
			"AddressUtxo": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Utxo"
				}
			},
			"AddressUtxoArray": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/AddressUtxo"
				},
				"example": []
			},
			"Utxo": {
				"type": "object",
				"properties": {
					"txid": {
						"type": "string"
					},
					"vout": {
						"type": "number"
					},
					"scriptPubKey": {
						"type": "string"
					},
					"amount": {
						"type": "number",
						"format": "float"
					},
					"satoshis": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"confirmations": {
						"type": "number"
					},
					"legacyAddress": {
						"type": "string"
					},
					"cashAddress": {
						"type": "string"
					}
				}
			},
			"AddressUnconfirmed": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/Unconfirmed"
				}
			},
			"AddressUnconfirmedArray": {
				"type": "array",
				"items": {
					"$ref": "#/components/schemas/AddressUnconfirmed"
				},
				"example": []
			},
			"Unconfirmed": {
				"type": "object",
				"properties": {
					"txid": {
						"type": "string"
					},
					"vout": {
						"type": "number"
					},
					"scriptPubKey": {
						"type": "string"
					},
					"amount": {
						"type": "number",
						"format": "float"
					},
					"satoshis": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"confirmations": {
						"type": "number"
					},
					"legacyAddress": {
						"type": "string"
					},
					"cashAddress": {
						"type": "string"
					}
				}
			},
			"BlockDetails": {
				"type": "object",
				"properties": {
					"hash": {
						"type": "string"
					},
					"size": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"merkleroot": {
						"type": "string"
					},
					"tx": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"time": {
						"type": "number"
					},
					"nonce": {
						"type": "number"
					},
					"bits": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"chainwork": {
						"type": "string"
					},
					"confirmations": {
						"type": "number"
					},
					"previousblockhash": {
						"type": "string"
					},
					"nextblockhash": {
						"type": "string"
					},
					"reward": {
						"type": "number",
						"format": "float"
					},
					"isMainChain": {
						"type": "boolean"
					},
					"poolInfo": {
						"type": "object",
						"properties": {
							"poolName": "string",
							"url": "string"
						}
					}
				}
			},
			"BestBlockHash": {
				"type": "string"
			},
			"Block": {
				"type": "object",
				"properties": {
					"hash": {
						"type": "string"
					},
					"confirmations": {
						"type": "number"
					},
					"size": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"versionHex": {
						"type": "string"
					},
					"merkleroot": {
						"type": "string"
					},
					"tx": {
						"type": "array",
						"items": {
							"type": "string"
						}
					},
					"time": {
						"type": "number"
					},
					"mediantime": {
						"type": "number"
					},
					"nonce": {
						"type": "number"
					},
					"bits": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"chainwork": {
						"type": "string"
					},
					"previousblockhash": {
						"type": "string"
					},
					"nextblockhash": {
						"type": "string"
					}
				}
			},
			"BlockchainInfo": {
				"type": "object",
				"properties": {
					"chain": {
						"type": "string"
					},
					"blocks": {
						"type": "number"
					},
					"headers": {
						"type": "number"
					},
					"bestblockhash": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"mediantime": {
						"type": "number"
					},
					"verificationprogress": {
						"type": "number",
						"format": "float"
					},
					"chainwork": {
						"type": "string"
					},
					"pruned": {
						"type": "boolean"
					},
					"softforks": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"id": "string",
								"version": "number",
								"reject": {
									"type": "object",
									"properties": {
										"status": "boolean"
									}
								}
							}
						}
					},
					"bip9_softforks": {
						"type": "object",
						"properties": {
							"status": "string",
							"startTime": "number",
							"timeout": "number",
							"since": "number"
						}
					}
				}
			},
			"BlockCount": {
				"type": "number"
			},
			"BlockHash": {
				"type": "string"
			},
			"BlockHeader": {
				"type": "object",
				"properties": {
					"hash": {
						"type": "string"
					},
					"confirmations": {
						"type": "number"
					},
					"height": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"versionHex": {
						"type": "string"
					},
					"merkleroot": {
						"type": "string"
					},
					"time": {
						"type": "number"
					},
					"mediantime": {
						"type": "number"
					},
					"nonce": {
						"type": "number"
					},
					"bits": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"chainwork": {
						"type": "string"
					},
					"previousblockhash": {
						"type": "string"
					},
					"nextblockhash": {
						"type": "string"
					}
				}
			},
			"Difficulty": {
				"type": "number",
				"format": "float"
			},
			"MempoolInfo": {
				"type": "object",
				"properties": {
					"size": {
						"type": "number"
					},
					"bytes": {
						"type": "number"
					},
					"usage": {
						"type": "number"
					},
					"maxmempool": {
						"type": "number"
					},
					"mempoolminfee": {
						"type": "number"
					}
				}
			},
			"RawMempool": {
				"type": "array",
				"items": {
					"type": "string"
				}
			},
			"DecodeRawTransaction": {
				"type": "object",
				"properties": {
					"txid": {
						"type": "string"
					},
					"hash": {
						"type": "string"
					},
					"size": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"vin": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"txid": {
									"type": "string"
								},
								"vout": {
									"type": "number"
								},
								"scriptSig": {
									"type": "object",
									"properties": {
										"asm": {
											"type": "string"
										},
										"hex": {
											"type": "string"
										}
									}
								},
								"sequence": {
									"type": "string"
								}
							}
						}
					},
					"vout": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"value": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptPubkey": {
									"type": "object",
									"properties": {
										"asm": {
											"type": "string"
										},
										"hex": {
											"type": "string"
										},
										"reqSigs": {
											"type": "number"
										},
										"type": {
											"type": "string"
										},
										"addresses": {
											"type": "array",
											"items": {
												"address": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					}
				}
			},
			"DecodeScript": {
				"type": "object",
				"properties": {
					"asm": {
						"type": "string"
					},
					"type": {
						"type": "string"
					},
					"p2sh": {
						"type": "string"
					}
				}
			},
			"GetRawTransaction": {
				"type": "object",
				"properties": {
					"hex": {
						"type": "string"
					},
					"txid": {
						"type": "string"
					},
					"hash": {
						"type": "string"
					},
					"size": {
						"type": "number"
					},
					"version": {
						"type": "number"
					},
					"vin": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"txid": {
									"type": "string"
								},
								"vout": {
									"type": "number"
								},
								"scriptSig": {
									"type": "object",
									"properties": {
										"asm": {
											"type": "string"
										},
										"hex": {
											"type": "string"
										},
										"sequence": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"vout": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"value": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptPubkey": {
									"type": "object",
									"properties": {
										"asm": {
											"type": "string"
										},
										"hex": {
											"type": "string"
										},
										"reqSigs": {
											"type": "number"
										},
										"type": {
											"type": "string"
										},
										"addresses": {
											"type": "array",
											"items": {
												"address": {
													"type": "string"
												}
											}
										}
									}
								}
							}
						}
					},
					"blockhash": {
						"type": "string"
					},
					"confirmations": {
						"type": "number"
					},
					"time": {
						"type": "number"
					},
					"blocktime": {
						"type": "number"
					}
				}
			},
			"TransactionDetails": {
				"type": "object",
				"properties": {
					"txid": {
						"type": "string"
					},
					"version": {
						"type": "number"
					},
					"locktime": {
						"type": "number"
					},
					"vin": {
						"type": "array",
						"items": {
							"type": "object",
							"properties": {
								"txid": {
									"type": "string"
								},
								"vout": {
									"type": "number"
								},
								"sequence": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptSig": {
									"type": "object",
									"properties": {
										"hex": {
											"type": "string"
										},
										"asm": {
											"type": "string"
										},
										"value": {
											"type": "number"
										},
										"legacyAddress": {
											"type": "string"
										},
										"cashAddress": {
											"type": "string"
										}
									}
								}
							}
						}
					},
					"vout": {
						"type": "array",
						"items": {
							"objects": {
								"type": "object",
								"properties": {
									"value": {
										"type": "number"
									},
									"n": {
										"type": "number"
									},
									"scriptPubkey": {
										"type": "object",
										"properties": {
											"hex": {
												"type": "string"
											},
											"asm": {
												"type": "string"
											},
											"addresses": {
												"type": "array",
												"items": {
													"address": {
														"type": "string"
													}
												}
											},
											"type": {
												"type": "string"
											}
										}
									},
									"spentTxId": {
										"type": "string"
									},
									"spentIndex": {
										"type": "number"
									},
									"spentHeight": {
										"type": "number"
									}
								}
							},
							"type": "object",
							"properties": {
								"value": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptPubkey": {
									"type": "object",
									"properties": {
										"hex": {
											"type": "string"
										},
										"asm": {
											"type": "string"
										}
									}
								},
								"spentTxId": {
									"type": "string"
								},
								"spentIndex": {
									"type": "number"
								},
								"spentHeight": {
									"type": "number"
								}
							}
						}
					},
					"blockhash": {
						"type": "string"
					},
					"blockheight": {
						"type": "number"
					},
					"confirmations": {
						"type": "number"
					},
					"time": {
						"type": "number"
					},
					"valueOut": {
						"type": "number"
					},
					"size": {
						"type": "number"
					},
					"valueIn": {
						"type": "number"
					},
					"fees": {
						"type": "number"
					}
				}
			},
			"ValidateAddress": {
				"type": "object",
				"properties": {
					"isvalid": {
						"type": "boolean"
					},
					"address": {
						"type": "string"
					},
					"scriptPubKey": {
						"type": "string"
					},
					"ismine": {
						"type": "boolean"
					},
					"iswatchonly": {
						"type": "boolean"
					},
					"isscript": {
						"type": "boolean"
					}
				}
			},
			"Info": {
				"type": "object",
				"properties": {
					"version": {
						"type": "number"
					},
					"protocolversion": {
						"type": "number"
					},
					"blocks": {
						"type": "number"
					},
					"timeoffset": {
						"type": "number"
					},
					"connections": {
						"type": "number"
					},
					"proxy": {
						"type": "string"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"paytxfee": {
						"type": "number"
					},
					"relayfee": {
						"type": "number",
						"format": "float"
					},
					"errors": {
						"type": "string"
					}
				}
			},
			"MemoryInfo": {
				"type": "object",
				"properties": {
					"locked": {
						"type": "object",
						"properties": {
							"used": {
								"type": "number"
							},
							"free": {
								"type": "number"
							},
							"total": {
								"type": "number"
							},
							"locked": {
								"type": "number"
							},
							"chunks_used": {
								"type": "number"
							},
							"chunks_free": {
								"type": "number"
							}
						}
					}
				}
			},
			"MiningInfo": {
				"type": "object",
				"properties": {
					"blocks": {
						"type": "number"
					},
					"currentblocksize": {
						"type": "number"
					},
					"currentblocktx": {
						"type": "number"
					},
					"difficulty": {
						"type": "number",
						"format": "float"
					},
					"blockprioritypercentage": {
						"type": "number"
					},
					"errors": {
						"type": "string"
					},
					"networkhashps": {
						"type": "number"
					},
					"pooledtx": {
						"type": "number"
					},
					"chain": {
						"type": "string"
					}
				}
			},
			"NetworkHashps": {
				"type": "number"
			},
			"ConnectionCount": {
				"type": "number"
			},
			"MempoolAncestors": {
				"type": "array",
				"items": {
					"type": "string"
				}
			},
			"MempoolDescendants": {
				"type": "array",
				"items": {
					"type": "string"
				}
			}
		}
	},
	"openapi": "3.0.0",
	"info": {
		"description": "trest.bitcoin.com is the REST layer for Bitcoin.com's Cloud. More info: [developer.bitcoin.com](https://developer.bitcoin.com). Chatroom [geni.us/CashDev](http://geni.us/CashDev)",
		"version": "2.0.0",
		"title": "REST",
		"license": {
			"name": "MIT",
			"url": "https://opensource.org/licenses/MIT"
		}
	},
	"paths": {
		"/address/details/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address details single",
				"description": "Returns the details of an address including balance",
				"operationId": "detailsSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address in cashAddr or legacy",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/details": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Address details bulk",
				"description": "Returns the details of multiple addresses",
				"operationId": "detailsBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressDetailsArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/utxo/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address utxos single",
				"description": "Returns the list of utxo for an address",
				"operationId": "utxoSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxo"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/utxo": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Address utxo bulk",
				"description": "Returns the utxo of multiple addresses",
				"operationId": "utxoBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxoArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/unconfirmed/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Unconfirmed transactions for an address",
				"description": "Returns the list of unconfirmed transactions for an address",
				"operationId": "unconfirme  dSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUnconfirmed"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/unconfirmed": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Unconfirmed transactions for array of addresses",
				"description": "Returns the list of unconfirmed transactions for an array of addresses",
				"operationId": "unconfirmedBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxoArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/transactions/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Transactions for an address",
				"description": "Returns the list of transactions for an address",
				"operationId": "transactionsSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address in cashAddr or legacy",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/address/transactions": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Transactions for an array of addresses",
				"description": "Returns the list of transactions for an array of addresses",
				"operationId": "transactionsBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHash/{hash}": {
			"get": {
				"tags": [
					"block"
				],
				"summary": "Block details",
				"description": "Details about a block by hash",
				"operationId": "blockDetailsHash",
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "Block hash",
						"required": true,
						"example": "0000000000262e9a70fae6c38cc9a91af2819b04521d2e9e99b7ae0328ee429d",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block hash.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block hash."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHeight/{height}": {
			"get": {
				"tags": [
					"block"
				],
				"summary": "Block details",
				"description": "Details about a block by height",
				"operationId": "blockDetailsHeight",
				"parameters": [
					{
						"name": "height",
						"in": "path",
						"description": "Block height",
						"required": true,
						"example": "500000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block height.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block height."
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBestBlockHash": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hash of the best block in the longest blockchain.",
				"description": "Returns the hash of the best (tip) block in the longest blockchain.",
				"operationId": "getBestBlockHash",
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BestBlockHash"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockchainInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Info regarding blockchain processing",
				"description": "Returns an object containing various state info regarding blockchain processing.",
				"operationId": "getBlockchainInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockchainInfo"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockCount": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Number of blocks in the longest blockchain.",
				"description": "Returns the number of blocks in the longest blockchain.",
				"operationId": "getBlockCount",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockCount"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockHeader/{hash}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about blockheader hash",
				"description": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader hash.",
				"operationId": "getBlockHeader",
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "the block hash",
						"required": true,
						"example": "0000000000262e9a70fae6c38cc9a91af2819b04521d2e9e99b7ae0328ee429d",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "true for a json object, false for the hex encoded data",
						"required": false,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockHeader"
								}
							}
						}
					},
					"400": {
						"description": "Block not found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Block not found"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getChainTips": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about all known tips in the block tree",
				"description": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.",
				"operationId": "getChainTips",
				"responses": {
					"200": {
						"description": "successful operation"
					}
				}
			}
		},
		"/blockchain/getDifficulty": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Proof-of-work difficulty",
				"description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
				"operationId": "getDifficulty",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Difficulty"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getMempoolEntry/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Mempool data for transaction",
				"description": "Returns mempool data for given transaction",
				"operationId": "getMempoolEntry",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id (must be in mempool)",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "The active state of the TX memory pool.",
				"description": "Returns details on the active state of the TX memory pool.",
				"operationId": "getMempoolInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MempoolInfo"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getRawMempool": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "All transaction ids in memory pool.",
				"description": "Returns all transaction ids in memory pool as a json array of string transaction ids.",
				"operationId": "getRawMempool",
				"parameters": [
					{
						"name": "verbose",
						"in": "query",
						"description": "True for a json object, false for array of transaction ids",
						"required": false,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RawMempool"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getTxOut/{txid}/{n}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Details about unspent transaction output.",
				"description": "Returns details about an unspent transaction output.",
				"operationId": "getTxOut",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "n",
						"in": "path",
						"description": "vout number",
						"required": true,
						"example": 0,
						"schema": {
							"type": "number",
							"default": 0
						}
					},
					{
						"name": "mempool",
						"in": "query",
						"description": "Whether to include the mempool",
						"required": false,
						"example": "false",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/blockchain/getTxOutProof/{txids}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hex-encoded proof that 'txid' was included.",
				"description": "Returns a hex-encoded proof that 'txid' was included in a block.",
				"operationId": "getTxOutProof",
				"parameters": [
					{
						"name": "txids",
						"in": "path",
						"description": "a txid string",
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/verifyTxOutProof/{proof}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Verify that a proof points to a transaction in a block",
				"description": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain",
				"operationId": "verifyTxOutProof",
				"parameters": [
					{
						"name": "proof",
						"in": "path",
						"description": "The hex-encoded proof generated by gettxoutproof",
						"example": "",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/control/getInfo": {
			"get": {
				"tags": [
					"control"
				],
				"summary": "Various state info.",
				"description": "Returns an object containing various state info.",
				"operationId": "getInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Info"
								}
							}
						}
					}
				}
			}
		},
		"/mining/getMiningInfo": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Returns a json object containing mining-related information.",
				"description": "",
				"operationId": "getMiningInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MiningInfo"
								}
							}
						}
					}
				}
			}
		},
		"/mining/getNetworkHashps": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Estimated network hashes per second",
				"description": "Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.",
				"operationId": "getNetworkHashps",
				"parameters": [
					{
						"in": "query",
						"name": "nblocks",
						"description": "the number of blocks, or -1 for blocks since last difficulty change.",
						"required": false,
						"example": 120,
						"schema": {
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "height",
						"description": "to estimate at the time of the given height.",
						"required": false,
						"example": -1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NetworkHashps"
								}
							}
						}
					}
				}
			}
		},
		"/rawtransactions/decodeRawTransaction/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the hex encoded transaction.",
				"description": "Return a JSON object representing the serialized, hex-encoded transaction.",
				"operationId": "decodeRawTransaction",
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The transaction hex string",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "TX decode failed"
					}
				}
			}
		},
		"/rawtransactions/decodeScript/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Decode a hex-encoded script.",
				"description": "Decode a hex-encoded script.",
				"operationId": "decodeScript",
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The hex encoded script",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeScript"
								}
							}
						}
					},
					"400": {
						"description": "Argument must be hexadecimal string"
					}
				}
			}
		},
		"/rawtransactions/getRawTransaction/{txid}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the raw transaction data.",
				"description": "return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.",
				"operationId": "getRawTransaction",
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "The transaction id",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "verbose",
						"description": "If false, return a string, otherwise return a json object",
						"required": true,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/transaction/details/{txid}": {
			"get": {
				"tags": [
					"transaction"
				],
				"summary": "Transaction details",
				"description": "Details about a transaction",
				"operationId": "transactionDetails",
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "single txid or url encoded array of txids",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionDetails"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/util/validateAddress/{address}": {
			"get": {
				"tags": [
					"util"
				],
				"summary": "Information about the given bitcoin address.",
				"description": "Return information about the given bitcoin address.",
				"operationId": "validateAddress",
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"description": "The bitcoin address to validate",
						"required": true,
						"example": "bchtest:qz35h5mfa8w2pqma2jq06lp7dnv5fxkp2svtllzmlf",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateAddress"
								}
							}
						}
					},
					"400": {
						"description": "Invalid Address"
					}
				}
			}
		},
		"/rawtransactions/decodeTransaction/{rawTx}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "decodeTransaction",
				"description": "Decodes an Omni transaction. API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
				"operationId": "rawTransactionsDecodeTransaction",
				"parameters": [
					{
						"name": "rawTx",
						"in": "path",
						"description": "The raw transaction to decode",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "prevTxs",
						"in": "query",
						"description": "A JSON array of transaction inputs (default: none)",
						"required": false,
						"example": "",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "height",
						"in": "query",
						"description": "The parsing block height (default: 0 for chain height)",
						"required": false,
						"example": 0,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/balance/{address}/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balance",
				"description": "Returns the token balance for a given address and property.",
				"operationId": "dataRetrievalBalance",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The address",
						"required": true,
						"example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "The property identifier",
						"required": true,
						"example": "1",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/balancesForAddress/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balancesForAddress",
				"description": "Returns a list of all token balances for a given address. API reference: https://developer.bitcoin.com/wormhole/docs/dataRetrieval",
				"operationId": "dataRetrievalBalancesForAddress",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The address",
						"required": true,
						"example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/balancesForId/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balanceForId",
				"description": "Returns a list of token balances for a given currency or property identifier. API Reference: https://developer.bitcoin.com/wormhole/docs/dataRetrieval",
				"operationId": "dataRetrievalBalancesForId",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The property identifier",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/balancesHash/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balancesHash",
				"description": "Returns a hash of the balances for the property.",
				"operationId": "dataRetrievalBalancesHash",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The property to hash balances for",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/crowdSale/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "crowdSale",
				"description": "Returns information about a crowdsale.",
				"operationId": "dataRetrievalCrowdSale",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the crowdsale",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "List crowdsale participants (default: false)",
						"required": false,
						"type": "boolean",
						"example": true
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/currentConsensusHash": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "currentConsensusHash",
				"description": "Returns the consensus hash for all balances for the current block.",
				"operationId": "dataRetrievalCurrentConsensusHash",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/grants/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "grants",
				"description": "Returns information about granted and revoked units of managed tokens.",
				"operationId": "dataRetrievalGrants",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the managed tokens to lookup",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/info": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "info",
				"description": "Returns various state information of the client and protocol.",
				"operationId": "dataRetrievalInfo",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/payload/{txid}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "payload",
				"description": "Get the payload for an Omni transaction.",
				"operationId": "dataRetrievalPayload",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the transaction to retrieve payload",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Received an invalid txid as input."
					}
				}
			}
		},
		"/dataRetrieval/property/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "property",
				"description": "Returns details for about the tokens or smart property to lookup.",
				"operationId": "dataRetrievalProperty",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens or property",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/seedBlocks/{startBlock}/{endBlock}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "seedBlocks",
				"description": "Returns a list of blocks containing Omni transactions for use in seed block filtering.",
				"operationId": "dataRetrievalSeedBlocks",
				"parameters": [
					{
						"name": "startBlock",
						"in": "path",
						"description": "The first block to look for Omni transactions (inclusive)",
						"required": true,
						"example": 290000,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "endBlock",
						"in": "path",
						"description": "The last block to look for Omni transactions (inclusive)",
						"required": true,
						"example": "",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/STO/{txid}/{recipientFilter}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "STO",
				"description": "Get information and recipients of a send-to-owners transaction.",
				"operationId": "dataRetrievalSto",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the transaction to lookup",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "recipientFilter",
						"in": "path",
						"description": "A filter for recipients (wallet by default, '*' for all)",
						"required": true,
						"example": "*",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/transaction/{txid}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "transaction",
				"description": "Get detailed information about an Omni transaction.",
				"operationId": "dataRetrievalTransaction",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the transaction to lookup",
						"required": true,
						"example": "40112ab9d2b5f98427839272d7a1e23dd2afc6c8355626f373e076c2ab5c2f72",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "No information available about transaction"
					}
				}
			}
		},
		"/dataRetrieval/blockTransactions/{index}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "blockTransactions",
				"description": "Lists all Omni transactions in a block.",
				"operationId": "dataRetrievalBlockTransactions",
				"parameters": [
					{
						"name": "index",
						"in": "path",
						"description": "The block height or block index",
						"required": true,
						"example": 279007,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/pendingTransactions": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "pendingTransactions",
				"description": "Returns a list of unconfirmed Omni transactions, pending in the memory pool.",
				"operationId": "dataRetrievalPendingTransactions",
				"parameters": [
					{
						"name": "address",
						"in": "query",
						"description": "Address filter (default: '' for no filter)",
						"required": false,
						"example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/properties": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "properties",
				"description": "Lists all tokens or smart properties.",
				"operationId": "dataRetrievalProperties",
				"parameters": [
					{
						"name": "address",
						"in": "query",
						"description": "address filter (default: '*')",
						"required": false,
						"example": "*",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "count",
						"in": "query",
						"description": "show at most n transactions (default: 10)",
						"required": false,
						"example": 10,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "skip",
						"in": "query",
						"description": "skip the first n transactions (default: 0)",
						"required": false,
						"example": 0,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "startBlock",
						"in": "query",
						"description": "first block to begin the search (default: 0)",
						"required": false,
						"example": 0,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "endBlock",
						"in": "query",
						"description": "last block to include in the search (default: 9999999)",
						"required": false,
						"example": 9999999,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/frozenBalance/{address}/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "frozenBalance",
				"description": "Returns the frozen token balance for a given address and property.",
				"operationId": "dataRetrievalFrozenBalance",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address",
						"required": true,
						"example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "the property identifier",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/frozenBalanceForAddress/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "frozenBalanceForAddress",
				"description": "Returns the frozen token balance for a given address and property.",
				"operationId": "dataRetrievalFrozenBalanceForAddress",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address",
						"required": true,
						"example": "bchtest:qq2j9gp97gm9a6lwvhxc4zu28qvqm0x4j5e72v7ejg",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/frozenBalanceForId/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "frozenBalanceForId",
				"description": "Returns the frozen token balance for a given property.",
				"operationId": "dataRetrievalFrozenBalanceForId",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the Property ID",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/burnBCH": {
			"get": {
				"tags": [
					"payloadCreation"
				],
				"summary": "burnBCH",
				"description": "Creates the payload to burn bch to get whc.",
				"operationId": "payloadCreationBurnBCH",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/changeIssuer/{propertyId}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "changeIssuer",
				"description": "Creates the payload to change the issuer on record of the given tokens.",
				"operationId": "payloadCreationChangeIssuer",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens",
						"required": true,
						"example": 3,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"500": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Not Found."
								}
							}
						}
					}
				}
			}
		},
		"/payloadCreation/closeCrowdSale/{propertyId}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "closeCrowdSale",
				"description": "Creates the payload to manually close a crowdsale.",
				"operationId": "payloadCreationCloseCrowdSale",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the crowdsale to close",
						"required": true,
						"example": 70,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "JSON value is not an integer as expected"
								}
							}
						}
					}
				}
			}
		},
		"/payloadCreation/grant/{propertyId}/{amount}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "grant",
				"description": "Creates the payload to issue or grant new units of managed tokens.",
				"operationId": "payloadCreationGrant",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens to grant",
						"required": true,
						"example": 51,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "amount",
						"in": "path",
						"description": "The amount of tokens to create",
						"required": true,
						"example": "7000",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "memo",
						"in": "query",
						"description": "A text note attached to this transaction (none by default)",
						"required": false,
						"example": "Hello BITBOX",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Not Found"
								}
							}
						}
					}
				}
			}
		},
		"/payloadCreation/crowdsale/{ecosystem}/{propertyPrecision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{propertyIdDesired}/{tokensPerUnit}/{deadline}/{earlyBonus}/{undefine}/{totalNumber}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "crowdsale",
				"description": "Creates the payload for a new tokens issuance with crowdsale.",
				"operationId": "payloadCreationCrowdsale",
				"parameters": [
					{
						"name": "ecosystem",
						"in": "path",
						"description": "The ecosystem to create the tokens in, must be 1",
						"required": true,
						"example": "1",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyPrecision",
						"in": "path",
						"description": "The precision of the tokens to create:[0, 8]",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "previousId",
						"in": "path",
						"description": "An identifier of a predecessor token (0 for new crowdsales)",
						"required": true,
						"example": 0,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "category",
						"in": "path",
						"description": "A category for the new tokens",
						"required": true,
						"example": "Companies",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "subcategory",
						"in": "path",
						"description": "A subcategory for the new tokens",
						"required": true,
						"example": "Bitcoin Mining",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "path",
						"description": "The name of the new tokens to create",
						"required": true,
						"example": "Quantum Miner",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "url",
						"in": "path",
						"description": "An URL for further information about the new tokens",
						"required": true,
						"example": "www.example.com",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "data",
						"in": "path",
						"description": "A description for the new tokens",
						"required": true,
						"example": "Quantum Miner Tokens",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyIdDesired",
						"in": "path",
						"description": "The identifier of a token eligible to participate in the crowdsale",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "tokensPerUnit",
						"in": "path",
						"description": "The amount of tokens granted per unit invested in the crowdsale",
						"required": true,
						"example": "100",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "deadline",
						"in": "path",
						"description": "The deadline of the crowdsale as Unix timestamp",
						"required": true,
						"example": 1483228800,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "earlyBonus",
						"in": "path",
						"description": "An early bird bonus for participants in percent per week",
						"required": true,
						"example": 30,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "undefine",
						"in": "path",
						"description": "The value must be 0",
						"required": true,
						"example": 0,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "totalNumber",
						"in": "path",
						"description": "The number of tokens to create",
						"required": true,
						"example": "192978657",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/fixed/{ecosystem}/{propertyPrecision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}/{amount}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "fixed",
				"description": "Creates the payload for a new tokens issuance with fixed supply.",
				"operationId": "payloadCreationFixed",
				"parameters": [
					{
						"name": "ecosystem",
						"in": "path",
						"description": "The ecosystem to create the tokens in, must be 1",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyPrecision",
						"in": "path",
						"description": "The precision of the tokens to create:[0, 8]",
						"required": true,
						"example": "",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "previousId",
						"in": "path",
						"description": "An identifier of a predecessor token (use 0 for new tokens)",
						"required": true,
						"example": "",
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "category",
						"in": "path",
						"description": "A category for the new tokens",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "subcategory",
						"in": "path",
						"description": "A subcategory for the new tokens",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "path",
						"description": "The name of the new tokens to create",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "url",
						"in": "path",
						"description": "An URL for further information about the new tokens",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "data",
						"in": "path",
						"description": "A description for the new tokens",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "amount",
						"in": "path",
						"description": "The number of tokens to create",
						"required": true,
						"example": "",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/managed/{ecosystem}/{propertyPrecision}/{previousId}/{category}/{subcategory}/{name}/{url}/{data}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "managed",
				"description": "Creates the payload for a new tokens issuance with manageable supply.",
				"operationId": "payloadCreationManaged",
				"parameters": [
					{
						"name": "ecosystem",
						"in": "path",
						"description": "The ecosystem to create the tokens in, must be 1",
						"required": true,
						"example": "1",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyPrecision",
						"in": "path",
						"description": "The precision of the tokens to create:[0, 8]",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "previousId",
						"in": "path",
						"description": "An identifier of a predecessor token (use 0 for new tokens)",
						"required": true,
						"example": 0,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "category",
						"in": "path",
						"description": "A category for the new tokens",
						"required": true,
						"example": "Companies",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "subcategory",
						"in": "path",
						"description": "A subcategory for the new tokens",
						"required": true,
						"example": "Bitcoin Mining",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "name",
						"in": "path",
						"description": "The name of the new tokens to create",
						"required": true,
						"example": "Quantum Miner",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "url",
						"in": "path",
						"description": "An URL for further information about the new tokens",
						"required": true,
						"example": "www.example.com",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "data",
						"in": "path",
						"description": "A description for the new tokens",
						"required": true,
						"example": "Quantum Miner Tokens",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input."
					}
				}
			}
		},
		"/payloadCreation/participateCrowdSale/{amount}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "participateCrowdSale",
				"description": "Create the payload for a participate crowdsale transaction",
				"operationId": "payloadCreationParticipateCrowdSale",
				"parameters": [
					{
						"name": "amount",
						"in": "path",
						"description": "The amount of WHC to participateCrowdSale",
						"required": true,
						"example": "100.0",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/revoke/{propertyId}/{amount}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "revoke",
				"description": "Creates the payload to revoke units of managed tokens.",
				"operationId": "payloadCreationRevoke",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens to revoke",
						"required": true,
						"example": 51,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "amount",
						"in": "path",
						"description": "The amount of tokens to revoke",
						"required": true,
						"example": "100",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "memo",
						"in": "query",
						"description": "A text note attached to this transaction (none by default)",
						"required": false,
						"example": "Goodbye BITBOX",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/sendAll/{ecosystem}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "sendAll",
				"description": "Create the payload for a send all transaction.",
				"operationId": "payloadCreationSendAll",
				"parameters": [
					{
						"name": "ecosystem",
						"in": "path",
						"description": "The ecosystem of the tokens to send (1 for main ecosystem, 2 for test ecosystem)",
						"required": true,
						"example": 2,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/simpleSend/{propertyId}/{amount}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "simpleSend",
				"description": "Create the payload for a simple send transaction.",
				"operationId": "payloadCreationSimpleSend",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens to send",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "amount",
						"in": "path",
						"description": "The amount to send",
						"required": true,
						"example": "100.0",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/STO/{propertyId}/{amount}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "STO",
				"description": "Creates the payload for a send-to-owners transaction",
				"operationId": "payloadCreationSTO",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens to distribute",
						"required": true,
						"example": 3,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "amount",
						"in": "path",
						"description": "The amount to distribute",
						"required": true,
						"example": "5000",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "distributionProperty",
						"in": "query",
						"description": "The identifier of the property holders to distribute to",
						"required": false,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/freeze/{toAddress}/{propertyId}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "freeze",
				"description": "Creates the payload for a freeze transaction",
				"operationId": "payloadCreationFreeze",
				"parameters": [
					{
						"name": "toAddress",
						"in": "path",
						"description": "The to address",
						"required": true,
						"example": 3,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens to freeze",
						"required": true,
						"example": 3,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/unfreeze/{toAddress}/{propertyId}": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "unfreeze",
				"description": "Creates the payload for an unfreeze transaction",
				"operationId": "payloadCreationUnfreeze",
				"parameters": [
					{
						"name": "toAddress",
						"in": "path",
						"description": "The to address",
						"required": true,
						"example": 3,
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens to unfreeze",
						"required": true,
						"example": 3,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "/v2"
		}
	],
	"tags": [
		{
			"name": "address",
			"description": "Address details and utxo",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/bitbox/docs/address"
			}
		},
		{
			"name": "block",
			"description": "Block Details",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/bitbox/docs/block"
			}
		},
		{
			"name": "blockchain",
			"description": "Interacting w/ the BCH Blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/bitbox/docs/blockchain"
			}
		},
		{
			"name": "control",
			"description": "Control your blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/bitbox/docs/control"
			}
		},
		{
			"name": "mining",
			"description": "Mining w/ the BCH Blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/bitbox/docs/mining"
			}
		},
		{
			"name": "rawtransactions",
			"description": "Create transactions to be transmitted to the network.",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/bitbox/docs/rawtransactions"
			}
		},
		{
			"name": "transaction",
			"description": "Transaction details.",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/bitbox/docs/rawtransactions"
			}
		},
		{
			"name": "util",
			"description": "Bitcoin Cash utilities.",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/bitbox/docs/util"
			}
		},
		{
			"name": "dataRetrieval",
			"description": "dataRetrieval",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/wormhole/docs/dataRetrieval"
			}
		},
		{
			"name": "payloadCreation",
			"description": "payloadCreation",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://developer.bitcoin.com/wormhole/docs/payloadCreation"
			}
		}
	]
}