{
  "paths": {
    "/address/details/{address}": {
      "get": {
        "tags": ["address"],
        "summary": "Address details single",
        "description": "Returns the details of an address including balance",
        "operationId": "detailsSingle",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address in cashAddr or legacy",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/details": {
      "post": {
        "tags": ["address"],
        "summary": "Address details bulk",
        "description": "Returns the details of multiple addresses",
        "operationId": "detailsBulk",
        "requestBody": {
          "description": "Array of addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressDetailsArray"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/utxo/{address}": {
      "get": {
        "tags": ["address"],
        "summary": "Address utxos single",
        "description": "Returns the list of utxo for an address",
        "operationId": "utxoSingle",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address or an array of addresses in cashAddr or legacy",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxo"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/utxo": {
      "post": {
        "tags": ["address"],
        "summary": "Address utxo bulk",
        "description": "Returns the utxo of multiple addresses",
        "operationId": "utxoBulk",
        "requestBody": {
          "description": "Array of addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxoArray"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/unconfirmed/{address}": {
      "get": {
        "tags": ["address"],
        "summary": "Unconfirmed transactions for an address",
        "description": "Returns the list of unconfirmed transactions for an address",
        "operationId": "unconfirmedSingle",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address or an array of addresses in cashAddr or legacy",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUnconfirmed"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/unconfirmed": {
      "post": {
        "tags": ["address"],
        "summary": "Unconfirmed transactions for array of addresses",
        "description": "Returns the list of unconfirmed transactions for an array of addresses",
        "operationId": "unconfirmedBulk",
        "requestBody": {
          "description": "Array of addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddressUtxoArray"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/transactions/{address}": {
      "get": {
        "tags": ["address"],
        "summary": "Transactions for an address",
        "description": "Returns the list of transactions for an address",
        "operationId": "transactionsSingle",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "the address in cashAddr or legacy",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid value/s - Null"
          }
        }
      }
    },
    "/address/transactions": {
      "post": {
        "tags": ["address"],
        "summary": "Transactions for an array of addresses",
        "description": "Returns the list of transactions for an array of addresses",
        "operationId": "transactionsBulk",
        "requestBody": {
          "description": "Array of addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Received an invalid Bitcoin Cash address as input.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid Bitcoin Cash address as input."
                }
              }
            }
          }
        }
      }
    },
    "/address/fromXPub/{xpub}": {
      "get": {
        "tags": ["address"],
        "summary": "Address from extended public key and hdpath",
        "description": "Returns an address for an extended public key and hdpath",
        "operationId": "fromXPubSingle",
        "parameters": [
          {
            "name": "xpub",
            "in": "path",
            "description": "the extended public key",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "hdPath",
            "in": "query",
            "description": "The HDPath. Defaults to the first BIP44 external change address",
            "required": false,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid value/s - Null"
          }
        }
      }
    },
    "/block/detailsByHash/{hash}": {
      "get": {
        "tags": ["block"],
        "summary": "Block details single",
        "description": "Details about a single block by hash",
        "operationId": "detailsHashSingle",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "Block hash",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block hash.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block hash."
                }
              }
            }
          }
        }
      }
    },
    "/block/detailsByHash": {
      "post": {
        "tags": ["block"],
        "summary": "Block details bulk",
        "description": "Details about multiple blocks by hashes",
        "operationId": "detailsHashBulk",
        "requestBody": {
          "description": "Array of hashes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockHashes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block hash.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block hash."
                }
              }
            }
          }
        }
      }
    },
    "/block/detailsByHeight/{height}": {
      "get": {
        "tags": ["block"],
        "summary": "Block details single",
        "description": "Details about a single block by height",
        "operationId": "etailsHeightSingle",
        "parameters": [
          {
            "name": "height",
            "in": "path",
            "description": "Block height",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/block/detailsByHeight": {
      "post": {
        "tags": ["block"],
        "summary": "Block details bulk",
        "description": "Bulk details about blocks by heights",
        "operationId": "detailsHeightBulk",
        "requestBody": {
          "description": "Array of heights",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BlockHeights"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockDetails"
                }
              }
            }
          },
          "400": {
            "description": "Received an invalid block height.",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Received an invalid block height."
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBestBlockHash": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Hash of the best block in the longest blockchain.",
        "description": "Returns the hash of the best (tip) block in the longest blockchain.",
        "operationId": "getBestBlockHash",
        "responses": {
          "200": {
            "description": "successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BestBlockHash"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBlockchainInfo": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Info regarding blockchain processing",
        "description": "Returns an object containing various state info regarding blockchain processing.",
        "operationId": "getBlockchainInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockchainInfo"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBlockCount": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Number of blocks in the longest blockchain.",
        "description": "Returns the number of blocks in the longest blockchain.",
        "operationId": "getBlockCount",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockCount"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBlockHeader/{hash}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Information about blockheader hash",
        "description": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader hash.",
        "operationId": "getBlockHeaderSingle",
        "parameters": [
          {
            "name": "hash",
            "in": "path",
            "description": "the block hash",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "verbose",
            "in": "query",
            "description": "true for a json object, false for the hex encoded data",
            "required": false,
            "example": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockHeader"
                }
              }
            }
          },
          "400": {
            "description": "Block not found",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Block not found"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getBlockHeader": {
      "post": {
        "tags": ["blockchain"],
        "summary": "Bulk information about blockheader hash",
        "description": "Bulk information about blockheader hash",
        "operationId": "getBlockHeaderBulk",
        "requestBody": {
          "description": "Array of hashes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hashes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BlockHeader"
                }
              }
            }
          },
          "400": {
            "description": "Block not found",
            "content": {
              "application/json": {
                "schema": {
                  "status": 500,
                  "message": "Block not found"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getChainTips": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Information about all known tips in the block tree",
        "description": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.",
        "operationId": "getChainTips",
        "responses": {
          "200": {
            "description": "successful operation"
          }
        }
      }
    },
    "/blockchain/getDifficulty": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Proof-of-work difficulty",
        "description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
        "operationId": "getDifficulty",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Difficulty"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getMempoolEntry/{txid}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Mempool data for transaction",
        "description": "Returns mempool data for given transaction",
        "operationId": "getMempoolEntrySingle",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "the transaction id (must be in mempool)",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Transaction not in mempool"
          }
        }
      }
    },
    "/blockchain/getMempoolEntry": {
      "post": {
        "tags": ["blockchain"],
        "summary": "Mempool data for transaction",
        "description": "Returns mempool data for given transaction",
        "operationId": "getMempoolEntryBulk",
        "requestBody": {
          "description": "Array of txids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Txids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Transaction not in mempool"
          }
        }
      }
    },
    "/blockchain/getMempoolInfo": {
      "get": {
        "tags": ["blockchain"],
        "summary": "The active state of the TX memory pool.",
        "description": "Returns details on the active state of the TX memory pool.",
        "operationId": "getMempoolInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MempoolInfo"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getRawMempool": {
      "get": {
        "tags": ["blockchain"],
        "summary": "All transaction ids in memory pool.",
        "description": "Returns all transaction ids in memory pool as a json array of string transaction ids.",
        "operationId": "getRawMempool",
        "parameters": [
          {
            "name": "verbose",
            "in": "query",
            "description": "True for a json object, false for array of transaction ids",
            "required": false,
            "example": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RawMempool"
                }
              }
            }
          }
        }
      }
    },
    "/blockchain/getTxOut/{txid}/{n}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Details about unspent transaction output.",
        "description": "Returns details about an unspent transaction output.",
        "operationId": "getTxOut",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "the transaction id",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "n",
            "in": "path",
            "description": "vout number",
            "required": true,
            "example": "",
            "schema": {
              "type": "number",
              "default": 0
            }
          },
          {
            "name": "mempool",
            "in": "query",
            "description": "Whether to include the mempool",
            "required": false,
            "example": "",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid value/s - Null"
          }
        }
      }
    },
    "/blockchain/getTxOutProof/{txid}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Hex-encoded proof that single txid was included.",
        "description": "Returns a hex-encoded proof that 'txid' was included in a block.",
        "operationId": "getTxOutProofSingle",
        "parameters": [
          {
            "name": "txid",
            "in": "path",
            "description": "a txid string",
            "example": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/blockchain/getTxOutProof": {
      "post": {
        "tags": ["blockchain"],
        "summary": "Hex-encoded proof that multiple txids wwere included.",
        "description": "Returns a hex-encoded proof that multiple txids were included in a block.",
        "operationId": "getTxOutProofBulk",
        "requestBody": {
          "description": "Array of txids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Txids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/blockchain/verifyTxOutProof/{proof}": {
      "get": {
        "tags": ["blockchain"],
        "summary": "Verify that a single proof points to a transaction in a block",
        "description": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain",
        "operationId": "verifyTxOutProofSingle",
        "parameters": [
          {
            "name": "proof",
            "in": "path",
            "description": "The hex-encoded proof generated by gettxoutproof",
            "example": "",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/blockchain/verifyTxOutProof": {
      "post": {
        "tags": ["blockchain"],
        "summary": "Verify that bulk proofs point to transactions in a block",
        "description": "Verifies that bulk proofs point to transactions in a block",
        "operationId": "verifyTxOutProofBulk",
        "requestBody": {
          "description": "Array of proofs",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Proofs"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Invalid tag value"
          }
        }
      }
    },
    "/control/getInfo": {
      "get": {
        "tags": ["control"],
        "summary": "Various state info.",
        "description": "Returns an object containing various state info.",
        "operationId": "getInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Info"
                }
              }
            }
          }
        }
      }
    },
    "/mining/getMiningInfo": {
      "get": {
        "tags": ["mining"],
        "summary": "Returns a json object containing mining-related information.",
        "description": "",
        "operationId": "getMiningInfo",
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MiningInfo"
                }
              }
            }
          }
        }
      }
    },
    "/mining/getNetworkHashps": {
      "get": {
        "tags": ["mining"],
        "summary": "Estimated network hashes per second",
        "description": "Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.",
        "operationId": "getNetworkHashps",
        "parameters": [
          {
            "in": "query",
            "name": "nblocks",
            "description": "the number of blocks, or -1 for blocks since last difficulty change.",
            "required": false,
            "example": "",
            "schema": {
              "type": "number"
            }
          },
          {
            "in": "query",
            "name": "height",
            "description": "to estimate at the time of the given height.",
            "required": false,
            "example": "",
            "schema": {
              "type": "number"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NetworkHashps"
                }
              }
            }
          }
        }
      }
    },
    "/rawtransactions/decodeRawTransaction/{hex}": {
      "get": {
        "tags": ["rawtransactions"],
        "summary": "Return the hex encoded transaction.",
        "description": "Return a JSON object representing the serialized, hex-encoded transaction.",
        "operationId": "decodeRawTransactionSingle",
        "parameters": [
          {
            "in": "path",
            "name": "hex",
            "description": "The transaction hex string",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodeRawTransaction"
                }
              }
            }
          },
          "400": {
            "description": "TX decode failed"
          }
        }
      }
    },
    "/rawtransactions/decodeRawTransaction": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "Return bulk hex encoded transaction.",
        "description": "Return bulk hex encoded transaction.",
        "operationId": "decodeRawTransactionBulk",
        "requestBody": {
          "description": "Array of hexes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hexes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodeRawTransaction"
                }
              }
            }
          },
          "400": {
            "description": "TX decode failed"
          }
        }
      }
    },
    "/rawtransactions/decodeScript/{hex}": {
      "get": {
        "tags": ["rawtransactions"],
        "summary": "Decode a hex-encoded script.",
        "description": "Decode a hex-encoded script.",
        "operationId": "decodeScript",
        "parameters": [
          {
            "in": "path",
            "name": "hex",
            "description": "The hex encoded script",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DecodeScript"
                }
              }
            }
          },
          "400": {
            "description": "Argument must be hexadecimal string"
          }
        }
      }
    },
    "/rawtransactions/getRawTransaction/{txid}": {
      "get": {
        "tags": ["rawtransactions"],
        "summary": "Return the raw transaction data.",
        "description": "return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.",
        "operationId": "getRawTransactionSingle",
        "parameters": [
          {
            "in": "path",
            "name": "txid",
            "description": "The transaction id",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "verbose",
            "description": "If false, return a string, otherwise return a json object",
            "required": true,
            "example": "",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetRawTransaction"
                }
              }
            }
          },
          "400": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/rawtransactions/getRawTransaction": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "Return raw transaction data for multiple transactions.",
        "description": "Return the raw transaction data for multiple transactions. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.",
        "operationId": "getRawTransactionBulk",
        "requestBody": {
          "description": "Array of txids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RawTxids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/rawtransactions/sendRawTransaction": {
      "post": {
        "tags": ["rawtransactions"],
        "summary": "Submits multiple raw transactions to local node and network.",
        "description": "Submits multiple raw transaction (serialized, hex-encoded) to local node and network.",
        "operationId": "sendRawTransaction",
        "requestBody": {
          "description": "Array of raw tx hexes",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Hexes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation"
          },
          "400": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/transaction/details/{txid}": {
      "get": {
        "tags": ["transaction"],
        "summary": "Transaction details single",
        "description": "Details about a single transaction",
        "operationId": "transactionDetailsSingle",
        "parameters": [
          {
            "in": "path",
            "name": "txid",
            "description": "single txid or url encoded array of txids",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetails"
                }
              }
            }
          },
          "400": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/transaction/details": {
      "post": {
        "tags": ["transaction"],
        "summary": "Transaction details bulk",
        "description": "Bulk Details about a transaction",
        "operationId": "transactionDetailsBulk",
        "requestBody": {
          "description": "Array of txids",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Txids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionDetails"
                }
              }
            }
          },
          "400": {
            "description": "Transaction not found"
          }
        }
      }
    },
    "/util/validateAddress/{address}": {
      "get": {
        "tags": ["util"],
        "summary": "Information about single bitcoin cash address.",
        "description": "Return information about single bitcoin cash address.",
        "operationId": "validateAddressSingle",
        "parameters": [
          {
            "in": "path",
            "name": "address",
            "description": "The bitcoin address to validate",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAddress"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Address"
          }
        }
      }
    },
    "/util/validateAddress": {
      "post": {
        "tags": ["util"],
        "summary": "Information about bulk bitcoin cash addresses.",
        "description": "Return information about bulk bitcoin cash addresses.",
        "operationId": "validateAddressBulk",
        "requestBody": {
          "description": "Array of Addresses",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Addresses"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidateAddress"
                }
              }
            }
          },
          "400": {
            "description": "Invalid Address"
          }
        }
      }
    },
    "/rawtransactions/decodeTransaction/{rawTx}": {
      "get": {
        "tags": ["rawtransactions"],
        "summary": "decodeTransaction",
        "description": "Decodes an Omni transaction. API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
        "operationId": "decodeTransaction",
        "parameters": [
          {
            "name": "rawTx",
            "in": "path",
            "description": "The raw transaction to decode",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/list": {
      "get": {
        "tags": ["slp"],
        "summary": "list",
        "description": "List all SLP tokens",
        "operationId": "listAll",
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/list/{tokenId}": {
      "get": {
        "tags": ["slp"],
        "summary": "list token",
        "description": "List single SLP token by id",
        "operationId": "listSingle",
        "parameters": [
          {
            "name": "tokenId",
            "in": "path",
            "description": "The token id",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/address/convert/{address}": {
      "get": {
        "tags": ["slp"],
        "summary": "convert address to slpAddr, cashAddr and legacy",
        "description": "convert address to slpAddr, cashAddr and legacy",
        "operationId": "slpAddressConvert",
        "parameters": [
          {
            "name": "address",
            "in": "path",
            "description": "The slp address",
            "required": true,
            "example": "",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    },
    "/slp/validateTxid": {
      "post": {
        "tags": ["slp"],
        "summary": "Validate multiple txids",
        "description": "Validate multiple txids",
        "operationId": "validateTxidBulk",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SLPTxids"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "successful response"
          }
        }
      }
    }
  }
}
