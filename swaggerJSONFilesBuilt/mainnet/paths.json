{
	"paths": {
		"/address/details/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address details single",
				"description": "Returns the details of an address including balance",
				"operationId": "detailsSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address in cashAddr or legacy",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/details": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Address details bulk",
				"description": "Returns the details of multiple addresses",
				"operationId": "detailsBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressDetailsArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/utxo/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address utxos single",
				"description": "Returns the list of utxo for an address",
				"operationId": "utxoSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxo"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/utxo": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Address utxo bulk",
				"description": "Returns the utxo of multiple addresses",
				"operationId": "utxoBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxoArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/unconfirmed/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Unconfirmed transactions for an address",
				"description": "Returns the list of unconfirmed transactions for an address",
				"operationId": "unconfirmedSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUnconfirmed"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/unconfirmed": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Unconfirmed transactions for array of addresses",
				"description": "Returns the list of unconfirmed transactions for an array of addresses",
				"operationId": "unconfirmedBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/AddressUtxoArray"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/address/transactions/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Transactions for an address",
				"description": "Returns the list of transactions for an address",
				"operationId": "transactionsSingle",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address in cashAddr or legacy",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/address/transactions": {
			"post": {
				"tags": [
					"address"
				],
				"summary": "Transactions for an array of addresses",
				"description": "Returns the list of transactions for an array of addresses",
				"operationId": "transactionsBulk",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid Bitcoin Cash address as input."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHash/{hash}": {
			"get": {
				"tags": [
					"block"
				],
				"summary": "Block details single",
				"description": "Details about a single block by hash",
				"operationId": "detailsHashSingle",
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "Block hash",
						"required": true,
						"example": "000000000000000005e14d3f9fdfb70745308706615cfa9edca4f4558332b201",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block hash.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block hash."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHash": {
			"post": {
				"tags": [
					"block"
				],
				"summary": "Block details bulk",
				"description": "Details about multiple blocks by hashes",
				"operationId": "detailsHashBulk",
				"requestBody": {
					"description": "Array of hashes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlockHashes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block hash.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block hash."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHeight/{height}": {
			"get": {
				"tags": [
					"block"
				],
				"summary": "Block details single",
				"description": "Details about a single block by height",
				"operationId": "etailsHeightSingle",
				"parameters": [
					{
						"name": "height",
						"in": "path",
						"description": "Block height",
						"required": true,
						"example": "500000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block height.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block height."
								}
							}
						}
					}
				}
			}
		},
		"/block/detailsByHeight": {
			"post": {
				"tags": [
					"block"
				],
				"summary": "Block details bulk",
				"description": "Bulk details about blocks by heights",
				"operationId": "detailsHeightBulk",
				"requestBody": {
					"description": "Array of heights",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/BlockHeights"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockDetails"
								}
							}
						}
					},
					"400": {
						"description": "Received an invalid block height.",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Received an invalid block height."
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBestBlockHash": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hash of the best block in the longest blockchain.",
				"description": "Returns the hash of the best (tip) block in the longest blockchain.",
				"operationId": "getBestBlockHash",
				"responses": {
					"200": {
						"description": "successful response",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BestBlockHash"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockchainInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Info regarding blockchain processing",
				"description": "Returns an object containing various state info regarding blockchain processing.",
				"operationId": "getBlockchainInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockchainInfo"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockCount": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Number of blocks in the longest blockchain.",
				"description": "Returns the number of blocks in the longest blockchain.",
				"operationId": "getBlockCount",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockCount"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockHeader/{hash}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about blockheader hash",
				"description": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader hash.",
				"operationId": "getBlockHeaderSingle",
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "the block hash",
						"required": true,
						"example": "000000000000000005e14d3f9fdfb70745308706615cfa9edca4f4558332b201",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "true for a json object, false for the hex encoded data",
						"required": false,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockHeader"
								}
							}
						}
					},
					"400": {
						"description": "Block not found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Block not found"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getBlockHeader": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Bulk information about blockheader hash",
				"description": "Bulk information about blockheader hash",
				"operationId": "getBlockHeaderBulk",
				"requestBody": {
					"description": "Array of hashes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Hashes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/BlockHeader"
								}
							}
						}
					},
					"400": {
						"description": "Block not found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Block not found"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getChainTips": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about all known tips in the block tree",
				"description": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.",
				"operationId": "getChainTips",
				"responses": {
					"200": {
						"description": "successful operation"
					}
				}
			}
		},
		"/blockchain/getDifficulty": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Proof-of-work difficulty",
				"description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
				"operationId": "getDifficulty",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Difficulty"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getMempoolEntry/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Mempool data for transaction",
				"description": "Returns mempool data for given transaction",
				"operationId": "getMempoolEntrySingle",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id (must be in mempool)",
						"required": true,
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolEntry": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Mempool data for transaction",
				"description": "Returns mempool data for given transaction",
				"operationId": "getMempoolEntryBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "The active state of the TX memory pool.",
				"description": "Returns details on the active state of the TX memory pool.",
				"operationId": "getMempoolInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MempoolInfo"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getRawMempool": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "All transaction ids in memory pool.",
				"description": "Returns all transaction ids in memory pool as a json array of string transaction ids.",
				"operationId": "getRawMempool",
				"parameters": [
					{
						"name": "verbose",
						"in": "query",
						"description": "True for a json object, false for array of transaction ids",
						"required": false,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/RawMempool"
								}
							}
						}
					}
				}
			}
		},
		"/blockchain/getTxOut/{txid}/{n}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Details about unspent transaction output.",
				"description": "Returns details about an unspent transaction output.",
				"operationId": "getTxOut",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id",
						"required": true,
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "n",
						"in": "path",
						"description": "vout number",
						"required": true,
						"example": 0,
						"schema": {
							"type": "number",
							"default": 0
						}
					},
					{
						"name": "mempool",
						"in": "query",
						"description": "Whether to include the mempool",
						"required": false,
						"example": "false",
						"schema": {
							"type": "boolean",
							"default": false
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/blockchain/getTxOutProof/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hex-encoded proof that single txid was included.",
				"description": "Returns a hex-encoded proof that 'txid' was included in a block.",
				"operationId": "getTxOutProofSingle",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "a txid string",
						"example": "bbda45af0ba57e28866995c67a53c225336fddd14eb3dc87f2f3500fd61c8585",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/getTxOutProof": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Hex-encoded proof that multiple txids wwere included.",
				"description": "Returns a hex-encoded proof that multiple txids were included in a block.",
				"operationId": "getTxOutProofBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/verifyTxOutProof/{proof}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Verify that a single proof points to a transaction in a block",
				"description": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain",
				"operationId": "verifyTxOutProofSingle",
				"parameters": [
					{
						"name": "proof",
						"in": "path",
						"description": "The hex-encoded proof generated by gettxoutproof",
						"example": "010000007de867cc8adc5cc8fb6b898ca4462cf9fd667d7830a275277447e60800000000338f121232e169d3100edd82004dc2a1f0e1f030c6c488fa61eafa930b0528fe021f7449ffff001d36b4af9a0100000001338f121232e169d3100edd82004dc2a1f0e1f030c6c488fa61eafa930b0528fe0101",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/verifyTxOutProof": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Verify that bulk proofs point to transactions in a block",
				"description": "Verifies that bulk proofs point to transactions in a block",
				"operationId": "verifyTxOutProofBulk",
				"requestBody": {
					"description": "Array of proofs",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Proofs"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/control/getInfo": {
			"get": {
				"tags": [
					"control"
				],
				"summary": "Various state info.",
				"description": "Returns an object containing various state info.",
				"operationId": "getInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/Info"
								}
							}
						}
					}
				}
			}
		},
		"/mining/getMiningInfo": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Returns a json object containing mining-related information.",
				"description": "",
				"operationId": "getMiningInfo",
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/MiningInfo"
								}
							}
						}
					}
				}
			}
		},
		"/mining/getNetworkHashps": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Estimated network hashes per second",
				"description": "Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.",
				"operationId": "getNetworkHashps",
				"parameters": [
					{
						"in": "query",
						"name": "nblocks",
						"description": "the number of blocks, or -1 for blocks since last difficulty change.",
						"required": false,
						"example": 120,
						"schema": {
							"type": "number"
						}
					},
					{
						"in": "query",
						"name": "height",
						"description": "to estimate at the time of the given height.",
						"required": false,
						"example": -1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/NetworkHashps"
								}
							}
						}
					}
				}
			}
		},
		"/rawtransactions/decodeRawTransaction/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the hex encoded transaction.",
				"description": "Return a JSON object representing the serialized, hex-encoded transaction.",
				"operationId": "decodeRawTransactionSingle",
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The transaction hex string",
						"required": true,
						"example": "01000000013ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a000000006a4730440220540986d1c58d6e76f8f05501c520c38ce55393d0ed7ed3c3a82c69af04221232022058ea43ed6c05fec0eccce749a63332ed4525460105346f11108b9c26df93cd72012103083dfc5a0254613941ddc91af39ff90cd711cdcde03a87b144b883b524660c39ffffffff01807c814a000000001976a914d7e7c4e0b70eaa67ceff9d2823d1bbb9f6df9a5188ac00000000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "TX decode failed"
					}
				}
			}
		},
		"/rawtransactions/decodeRawTransaction": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return bulk hex encoded transaction.",
				"description": "Return bulk hex encoded transaction.",
				"operationId": "decodeRawTransactionBulk",
				"requestBody": {
					"description": "Array of hexes",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Hexes"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "TX decode failed"
					}
				}
			}
		},
		"/rawtransactions/decodeScript/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Decode a hex-encoded script.",
				"description": "Decode a hex-encoded script.",
				"operationId": "decodeScript",
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The hex encoded script",
						"required": true,
						"example": "4830450221009a51e00ec3524a7389592bc27bea4af5104a59510f5f0cfafa64bbd5c164ca2e02206c2a8bbb47eabdeed52f17d7df668d521600286406930426e3a9415fe10ed592012102e6e1423f7abde8b70bca3e78a7d030e5efabd3eb35c19302542b5fe7879c1a16",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/DecodeScript"
								}
							}
						}
					},
					"400": {
						"description": "Argument must be hexadecimal string"
					}
				}
			}
		},
		"/rawtransactions/getRawTransaction/{txid}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the raw transaction data.",
				"description": "return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.",
				"operationId": "getRawTransaction",
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "The transaction id",
						"required": true,
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
						"schema": {
							"type": "string"
						}
					},
					{
						"in": "query",
						"name": "verbose",
						"description": "If false, return a string, otherwise return a json object",
						"required": true,
						"example": true,
						"schema": {
							"type": "boolean"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/GetRawTransaction"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/transaction/details/{txid}": {
			"get": {
				"tags": [
					"transaction"
				],
				"summary": "Transaction details single",
				"description": "Details about a single transaction",
				"operationId": "transactionDetailsSingle",
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "single txid or url encoded array of txids",
						"required": true,
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionDetails"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/transaction/details": {
			"post": {
				"tags": [
					"transaction"
				],
				"summary": "Transaction details bulk",
				"description": "Bulk Details about a transaction",
				"operationId": "transactionDetailsBulk",
				"requestBody": {
					"description": "Array of txids",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Txids"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/TransactionDetails"
								}
							}
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/util/validateAddress/{address}": {
			"get": {
				"tags": [
					"util"
				],
				"summary": "Information about single bitcoin cash address.",
				"description": "Return information about single bitcoin cash address.",
				"operationId": "validateAddressSingle",
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"description": "The bitcoin address to validate",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateAddress"
								}
							}
						}
					},
					"400": {
						"description": "Invalid Address"
					}
				}
			}
		},
		"/util/validateAddress": {
			"post": {
				"tags": [
					"util"
				],
				"summary": "Information about bulk bitcoin cash addresses.",
				"description": "Return information about bulk bitcoin cash addresses.",
				"operationId": "validateAddressBulk",
				"requestBody": {
					"description": "Array of Addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Addresses"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful operation",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidateAddress"
								}
							}
						}
					},
					"400": {
						"description": "Invalid Address"
					}
				}
			}
		},
		"/rawtransactions/decodeTransaction/{rawTx}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "decodeTransaction",
				"description": "Decodes an Omni transaction. API Reference: https://developer.bitcoin.com/wormhole/docs/rawTransactions",
				"operationId": "decodeTransaction",
				"parameters": [
					{
						"name": "rawTx",
						"in": "path",
						"description": "The raw transaction to decode",
						"required": true,
						"example": "0200000001ee6dbb4d43427f5e35ecc3b6eeecfffeee22650e1d0a9846be1a09cee1b7e490020000006a47304402204cbf80c5eb831b4276e3bbf5b85bb64a05251e120f6357ca145651bdf97de5e5022037e448281add7144b65f3943e8654a901daf6f285feb6b63cc928cbe64b8a50e412102df0a79c642da671cd17dcd80b1e506f3b42b7c92a40b3067b5754eb40fc85d02ffffffff0329328d00000000001976a914fd542b2f9e06d814dd6c503dc24707e5620d9a7488ac0000000000000000166a1408776863000000000000000100000000b2d05e0022020000000000001976a91472ef3365835cd4e791ea3511d96f1eba32472a9988ac00000000",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/balance/{address}/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balance",
				"description": "Returns the token balance for a given address and property.",
				"operationId": "balance",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The address",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "The property identifier",
						"required": true,
						"example": "1",
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/balancesForAddress/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balancesForAddress",
				"description": "Returns a list of all token balances for a given address. API reference: https://developer.bitcoin.com/wormhole/docs/dataRetrieval",
				"operationId": "balancesForAddress",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "The address",
						"required": true,
						"example": "bitcoincash:qpew7vm9sdwdfeu3ag63rkt0r6ary3e2ny5p8lsfpn",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/balancesForId/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balanceForId",
				"description": "Returns a list of token balances for a given currency or property identifier. API Reference: https://developer.bitcoin.com/wormhole/docs/dataRetrieval",
				"operationId": "balancesForId",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The property identifier",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/balancesHash/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "balancesHash",
				"description": "Returns a hash of the balances for the property.",
				"operationId": "balancesHash",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The property to hash balances for",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/crowdSale/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "crowdSale",
				"description": "Returns information about a crowdsale.",
				"operationId": "crowdSale",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the crowdsale",
						"required": true,
						"example": 197,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "List crowdsale participants (default: false)",
						"required": false,
						"schema": {
							"type": "boolean"
						},
						"example": true
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/currentConsensusHash": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "currentConsensusHash",
				"description": "Returns the consensus hash for all balances for the current block.",
				"operationId": "currentConsensusHash",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/grants/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "grants",
				"description": "Returns information about granted and revoked units of managed tokens.",
				"operationId": "grants",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the managed tokens to lookup",
						"required": true,
						"example": 196,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/info": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "info",
				"description": "Returns various state information of the client and protocol.",
				"operationId": "info",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/payload/{txid}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "payload",
				"description": "Get the payload for an Omni transaction.",
				"operationId": "payload",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the transaction to retrieve payload",
						"required": true,
						"example": "bbda45af0ba57e28866995c67a53c225336fddd14eb3dc87f2f3500fd61c8585",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Received an invalid txid as input."
					}
				}
			}
		},
		"/dataRetrieval/property/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "property",
				"description": "Returns details for about the tokens or smart property to lookup.",
				"operationId": "property",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "The identifier of the tokens or property",
						"required": true,
						"example": 1,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/seedBlocks/{startBlock}/{endBlock}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "seedBlocks",
				"description": "Returns a list of blocks containing Omni transactions for use in seed block filtering.",
				"operationId": "seedBlocks",
				"parameters": [
					{
						"name": "startBlock",
						"in": "path",
						"description": "The first block to look for Omni transactions (inclusive)",
						"required": true,
						"example": 560000,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "endBlock",
						"in": "path",
						"description": "The last block to look for Omni transactions (inclusive)",
						"required": true,
						"example": 560100,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/STO/{txid}/{recipientFilter}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "STO",
				"description": "Get information and recipients of a send-to-owners transaction.",
				"operationId": "drSTO",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the transaction to lookup",
						"required": true,
						"example": "bbda45af0ba57e28866995c67a53c225336fddd14eb3dc87f2f3500fd61c8585",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "recipientFilter",
						"in": "path",
						"description": "A filter for recipients (wallet by default, '*' for all)",
						"required": true,
						"example": "*",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/transaction/{txid}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "transaction",
				"description": "Get detailed information about an Omni transaction.",
				"operationId": "transaction",
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "The hash of the transaction to lookup",
						"required": true,
						"example": "bbda45af0ba57e28866995c67a53c225336fddd14eb3dc87f2f3500fd61c8585",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "No information available about transaction"
					}
				}
			}
		},
		"/dataRetrieval/blockTransactions/{index}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "blockTransactions",
				"description": "Lists all Omni transactions in a block.",
				"operationId": "blockTransactions",
				"parameters": [
					{
						"name": "index",
						"in": "path",
						"description": "The block height or block index",
						"required": true,
						"example": 560000,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected"
					}
				}
			}
		},
		"/dataRetrieval/pendingTransactions/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "pendingTransactions",
				"description": "Returns a list of unconfirmed Omni transactions, pending in the memory pool.",
				"operationId": "pendingTransactions",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "Address filter (default: '' for no filter)",
						"required": false,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Invalid address. Note: use cashAddress"
					}
				}
			}
		},
		"/dataRetrieval/properties": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "properties",
				"description": "Lists all tokens or smart properties.",
				"operationId": "properties",
				"parameters": [
					{
						"name": "address",
						"in": "query",
						"description": "address filter (default: '*')",
						"required": false,
						"example": "*",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "count",
						"in": "query",
						"description": "show at most n transactions (default: 10)",
						"required": false,
						"example": 10,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "skip",
						"in": "query",
						"description": "skip the first n transactions (default: 0)",
						"required": false,
						"example": 0,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "startBlock",
						"in": "query",
						"description": "first block to begin the search (default: 0)",
						"required": false,
						"example": 0,
						"schema": {
							"type": "number"
						}
					},
					{
						"name": "endBlock",
						"in": "query",
						"description": "last block to include in the search (default: 9999999)",
						"required": false,
						"example": 9999999,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/frozenBalance/{address}/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "frozenBalance",
				"description": "Returns the frozen token balance for a given address and property.",
				"operationId": "frozenBalance",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "the property identifier",
						"required": true,
						"example": 206,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/frozenBalanceForAddress/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "frozenBalanceForAddress",
				"description": "Returns the frozen token balance for a given address and property.",
				"operationId": "frozenBalanceForAddress",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/frozenBalanceForId/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "frozenBalanceForId",
				"description": "Returns the frozen token balance for a given property.",
				"operationId": "frozenBalanceForId",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the Property ID",
						"required": true,
						"example": 206,
						"schema": {
							"type": "number"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ERC721AddressTokens/{address}/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ERC721AddressTokens",
				"description": "Returns details for about the tokens or smart property to lookup.",
				"operationId": "dataRetrievalERC721AddressTokens",
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address of the query",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ERC721PropertyDestroyTokens/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ERC721PropertyDestroyTokens",
				"description": "Returns details for about the destroy tokens to lookup.",
				"operationId": "dataRetrievalERC721PropertyDestroyTokens",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ERC721PropertyNews/{propertyId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ERC721PropertyNews",
				"description": "Returns details for about the tokens or smart property to lookup.",
				"operationId": "dataRetrievalERC721PropertyNews",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ERC721TokenNews/{propertyId}/{tokenId}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ERC721TokenNews",
				"description": "Returns details for about the tokens or smart property to lookup.",
				"operationId": "dataRetrievalERC721TokenNews",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x02",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tokenId",
						"in": "path",
						"description": "the identifier of the ERC721 token",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/dataRetrieval/ownerOfERC721Token/{propertyId}/{tokenId}/{address}": {
			"get": {
				"tags": [
					"dataRetrieval"
				],
				"summary": "ownerOfERC721Token",
				"description": "Query whether the Token's owner is the specified address.",
				"operationId": "dataRetrievalOwnerOfERC721Token",
				"parameters": [
					{
						"name": "propertyId",
						"in": "path",
						"description": "the identifier of the ERC721 property",
						"required": true,
						"example": "0x03",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "tokenId",
						"in": "path",
						"description": "the identifier of the ERC721 token",
						"required": true,
						"example": "0x01",
						"schema": {
							"type": "string"
						}
					},
					{
						"name": "address",
						"in": "path",
						"description": "query address for the specified ERC721 Token",
						"required": true,
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c",
						"schema": {
							"type": "string"
						}
					}
				],
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/burnBCH": {
			"get": {
				"tags": [
					"payloadCreation"
				],
				"summary": "burnBCH",
				"description": "Creates the payload to burn bch to get whc.",
				"operationId": "burnBCH",
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/changeIssuer": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "changeIssuer",
				"description": "Creates the payload to change the issuer on record of the given tokens.",
				"operationId": "changeIssuer",
				"requestBody": {
					"description": "The identifier of the tokens",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PropertyId"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					},
					"500": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Not Found."
								}
							}
						}
					}
				}
			}
		},
		"/payloadCreation/closeCrowdSale": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "closeCrowdSale",
				"description": "Creates the payload to manually close a crowdsale.",
				"operationId": "closeCrowdSale",
				"requestBody": {
					"description": "The identifier of the crowdsale to close",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/PropertyId"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "JSON value is not an integer as expected",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "JSON value is not an integer as expected"
								}
							}
						}
					}
				}
			}
		},
		"/payloadCreation/grant": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "grant",
				"description": "Creates the payload to issue or grant new units of managed tokens.",
				"operationId": "grant",
				"requestBody": {
					"description": "The identifier of the tokens to grant, amount of tokens to create and text note attached to this transaction",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Grant"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Not Found",
						"content": {
							"application/json": {
								"schema": {
									"status": 500,
									"message": "Not Found"
								}
							}
						}
					}
				}
			}
		},
		"/payloadCreation/crowdsale": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "crowdsale",
				"description": "Creates the payload for a new tokens issuance with crowdsale.",
				"operationId": "crowdsale",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Crowdsale"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/fixed": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "fixed",
				"description": "Creates the payload for a new tokens issuance with fixed supply.",
				"operationId": "fixed",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Fixed"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/managed": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "managed",
				"description": "Creates the payload for a new tokens issuance with manageable supply.",
				"operationId": "managed",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Managed"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input."
					}
				}
			}
		},
		"/payloadCreation/participateCrowdSale": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "participateCrowdSale",
				"description": "Create the payload for a participate crowdsale transaction",
				"operationId": "participateCrowdSale",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/ParticipateCrowdSale"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/revoke": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "revoke",
				"description": "Creates the payload to revoke units of managed tokens.",
				"operationId": "revoke",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Revoke"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/sendAll": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "sendAll",
				"description": "Create the payload for a send all transaction.",
				"operationId": "sendAll",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SendAll"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/simpleSend": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "simpleSend",
				"description": "Create the payload for a simple send transaction.",
				"operationId": "simpleSend",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/SimpleSend"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/STO": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "STO",
				"description": "Creates the payload for a send-to-owners transaction",
				"operationId": "STO",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/STO"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/freeze": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "freeze",
				"description": "Creates the payload for a freeze transaction",
				"operationId": "freeze",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Freeze"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/payloadCreation/unfreeze": {
			"post": {
				"tags": [
					"payloadCreation"
				],
				"summary": "unfreeze",
				"description": "Creates the payload for an unfreeze transaction",
				"operationId": "unfreeze",
				"requestBody": {
					"description": "",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/Unfreeze"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		},
		"/wormhole/transaction/confirmed": {
			"post": {
				"tags": [
					"wormhole"
				],
				"summary": "Confirmed wormhole transactions",
				"description": "Confirmed wormhole transactions",
				"operationId": "whTxConfirmed",
				"requestBody": {
					"description": "Array of addresses",
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/WHConfirmed"
							}
						}
					}
				},
				"responses": {
					"200": {
						"description": "successful response"
					}
				}
			}
		}
	}
}