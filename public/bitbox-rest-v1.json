{
	"swagger": "2.0",
	"info": {
		"description": "rest.bitbox.earth is the REST layer for BITBOX Cloud. More info: https://www.bitbox.earth. #bitbox chatroom http://ambassador.cash",
		"version": "1.0.1",
		"title": "REST",
		"license": {
			"name": "MIT",
			"url": "https://opensource.org/licenses/MIT"
		}
	},
	"basePath": "/v1",
	"tags": [
		{
			"name": "address",
			"description": "Address details and utxo",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/address"
			}
		},
		{
			"name": "block",
			"description": "Block Details",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/block"
			}
		},
		{
			"name": "blockchain",
			"description": "Interacting w/ the BCH Blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/blockchain"
			}
		},
		{
			"name": "control",
			"description": "Control your blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/control"
			}
		},
		{
			"name": "generating",
			"description": "Generating w/ the blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/generating"
			}
		},
		{
			"name": "mining",
			"description": "Mining w/ the BCH Blockchain",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/mining"
			}
		},
		{
			"name": "network",
			"description": "Interacting w/ the BCH Network",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/network"
			}
		},
		{
			"name": "rawtransactions",
			"description": "Create transactions to be transmitted to the network.",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/rawtransactions"
			}
		},
		{
			"name": "transaction",
			"description": "Transaction details.",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/transaction"
			}
		},
		{
			"name": "util",
			"description": "Bitcoin Cash utilities.",
			"externalDocs": {
				"description": "Find out more",
				"url": "https://www.bitbox.earth/bitboxcli/util"
			}
		}
	],
	"schemes": [
		"https"
	],
	"paths": {
		"/address/details/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address details",
				"description": "Returns the details of an address including balance",
				"operationId": "details",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or array of addresses in cashAddr or legacy",
						"required": true,
						"type": "string",
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c"
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"schema": {
						  "$ref": "#/definitions/AddressDetails"
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"schema": {
						  "status": 500,
							"message": "Received an invalid Bitcoin Cash address as input."
						}
					}
				}
			}
		},
		"/address/utxo/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Address utxos",
				"description": "Returns the list of utxo for an address",
				"operationId": "utxo",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"type": "string",
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c"
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"schema": {
						  "$ref": "#/definitions/AddressUtxo"
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"schema": {
						  "status": 500,
							"message": "Received an invalid Bitcoin Cash address as input."
						}
					}
				}
			}
		},
		"/address/unconfirmed/{address}": {
			"get": {
				"tags": [
					"address"
				],
				"summary": "Unconfirmed transactions for an address",
				"description": "Returns the list of unconfirmed transactions for an address",
				"operationId": "unconfirmed",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "address",
						"in": "path",
						"description": "the address or an array of addresses in cashAddr or legacy",
						"required": true,
						"type": "string",
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c"
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"schema": {
						  "$ref": "#/definitions/AddressUnconfirmed"
						}
					},
					"400": {
						"description": "Received an invalid Bitcoin Cash address as input.",
						"schema": {
						  "status": 500,
							"message": "Received an invalid Bitcoin Cash address as input."
						}
					}
				}
			}
		},
		"/block/details/{id}": {
			"get": {
				"tags": [
					"block"
				],
				"summary": "Block details",
				"description": "Details about a block",
				"operationId": "blockDetails",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "id",
						"in": "path",
						"description": "Block hash/height",
						"required": true,
						"type": "string",
						"example": "500000"
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"schema": {
						  "$ref": "#/definitions/BlockDetails"
						}
					},
					"400": {
						"description": "Received an invalid block height.",
						"schema": {
						  "status": 500,
							"message": "Received an invalid block height."
						}
					}
				}
			}
		},
		"/blockchain/getBestBlockHash": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hash of the best block in the longest blockchain.",
				"description": "Returns the hash of the best (tip) block in the longest blockchain.",
				"operationId": "getBestBlockHash",
				"consumes": [
					"application/json"
				],
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful response",
						"schema": {
						  "$ref": "#/definitions/BestBlockHash"
						}
					}
				}
			}
		},
		"/blockchain/getBlock/{hash}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about block hash.",
				"description": "If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash'. If verbose is true, returns an Object with information about block hash.",
				"operationId": "getBlock",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "the block hash",
						"required": true,
						"type": "string",
						"example": "00000000000000000046056a2d6728bc757862e7924a755125a519a2fec43c79"
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "true for a json object, false for the hex encoded data",
						"required": false,
						"type": "boolean",
						"default": true
					}
				],
				"responses": {
					"200": {
						"description": "successful response",
						"schema": {
						  "$ref": "#/definitions/Block"
						}
					},
					"400": {
						"description": "Block not found",
						"schema": {
						  "status": 500,
							"message": "Block not found"
						}
					}
				}
			}
		},
		"/blockchain/getBlockchainInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Info regarding blockchain processing",
				"description": "Returns an object containing various state info regarding blockchain processing.",
				"operationId": "getBlockchainInfo",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/BlockchainInfo"
						}
					}
				}
			}
		},
		"/blockchain/getBlockCount": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Number of blocks in the longest blockchain.",
				"description": "Returns the number of blocks in the longest blockchain.",
				"operationId": "getBlockCount",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/BlockCount"
						}
					}
				}
			}
		},
		"/blockchain/getBlockHash/{height}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hash of block in best-block-chain at height provided.",
				"description": "Returns hash of block in best-block-chain at height provided.",
				"operationId": "getBlockHash",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "height",
						"in": "path",
						"description": "the height index",
						"required": true,
						"type": "number",
						"example": 500000
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/BlockHash"
						}
					},
					"400": {
						"description": "Block not found",
						"schema": {
						  "status": 500,
							"message": "Block not found"
						}
					}
				}
			}
		},
		"/blockchain/getBlockHeader/{hash}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about blockheader hash",
				"description": "If verbose is false, returns a string that is serialized, hex-encoded data for blockheader 'hash'. If verbose is true, returns an Object with information about blockheader hash.",
				"operationId": "getBlockHeader",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "hash",
						"in": "path",
						"description": "the block hash",
						"required": true,
						"type": "string",
						"example": "000000000000000005e14d3f9fdfb70745308706615cfa9edca4f4558332b201"
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "true for a json object, false for the hex encoded data",
						"required": false,
						"type": "boolean",
						"default": true
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/BlockHeader"
						}
					},
					"400": {
						"description": "Block not found",
						"schema": {
						  "status": 500,
							"message": "Block not found"
						}
					}
				}
			}
		},
		"/blockchain/getChainTips": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Information about all known tips in the block tree",
				"description": "Return information about all known tips in the block tree, including the main chain as well as orphaned branches.",
				"operationId": "getChainTips",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation"
					}
				}
			}
		},
		"/blockchain/getDifficulty": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Proof-of-work difficulty",
				"description": "Returns the proof-of-work difficulty as a multiple of the minimum difficulty.",
				"operationId": "getDifficulty",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/Difficulty"
						}
					}
				}
			}
		},
		"/blockchain/getMempoolAncestors/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Returns all in-mempool ancestors.",
				"description": "If txid is in the mempool, returns all in-mempool ancestors.",
				"operationId": "getMempoolAncestors",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id (must be in mempool)",
						"required": true,
						"type": "string",
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33"
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "True for a json object, false for array of transaction ids",
						"required": false,
						"type": "boolean",
						"default": true
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/MempoolAncestors"
						}
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolDescendants/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Returns all in-mempool descendants.",
				"description": "If txid is in the mempool, returns all in-mempool descendants.",
				"operationId": "getMempoolDescendants",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id (must be in mempool)",
						"required": true,
						"type": "string",
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33"
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "True for a json object, false for array of transaction ids",
						"required": false,
						"type": "boolean",
						"default": true
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/MempoolDescendants"
						}
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolEntry/{txid}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Mempool data for transaction",
				"description": "Returns mempool data for given transaction",
				"operationId": "getMempoolEntry",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id (must be in mempool)",
						"required": true,
						"type": "string",
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not in mempool"
					}
				}
			}
		},
		"/blockchain/getMempoolInfo": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "The active state of the TX memory pool.",
				"description": "Returns details on the active state of the TX memory pool.",
				"operationId": "getMempoolInfo",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/MempoolInfo"
						}
					}
				}
			}
		},
		"/blockchain/getRawMempool": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "All transaction ids in memory pool.",
				"description": "Returns all transaction ids in memory pool as a json array of string transaction ids.",
				"operationId": "getRawMempool",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "verbose",
						"in": "query",
						"description": "True for a json object, false for array of transaction ids",
						"required": false,
						"type": "boolean",
						"default": true
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/RawMempool"
						}
					}
				}
			}
		},
		"/blockchain/getTxOut/{txid}/{n}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Details about unspent transaction output.",
				"description": "Returns details about an unspent transaction output.",
				"operationId": "getTxOut",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "txid",
						"in": "path",
						"description": "the transaction id",
						"required": true,
						"type": "string",
						"example": "fe28050b93faea61fa88c4c630f0e1f0a1c24d0082dd0e10d369e13212128f33"
					},
					{
						"name": "n",
						"in": "path",
						"description": "vout number",
						"required": true,
						"type": "number",
			      "default": 0
					},
					{
						"name": "verbose",
						"in": "query",
						"description": "Whether to include the mempool",
						"required": false,
						"type": "boolean",
						"default": true
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid value/s - Null"
					}
				}
			}
		},
		"/blockchain/getTxOutProof/{txids}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Hex-encoded proof that 'txid' was included.",
				"description": "Returns a hex-encoded proof that 'txid' was included in a block.",
				"operationId": "getTxOutProof",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "txids",
						"in": "path",
						"description": "a json array of txids to filter [ 'txid' string A transaction hash ,... ]",
						"required": true,
						"type": "string"
					},
					{
						"name": "blockhash",
						"in": "query",
						"description": "if specified, looks for txid in the block with this hash",
						"required": false,
						"type": "string"
					},
					{
						"name": "data",
						"in": "query",
						"description": "a string that is a serialized, hex-encoded data for the proof.",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/blockchain/preciousBlock/{blockhash}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Treats a block as if it were received before others with the same work",
				"description": "Treats a block as if it were received before others with the same work. A later preciousblock call can override the effect of an earlier one. The effects of preciousblock are not retained across restarts.",
				"operationId": "preciousBlock",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "blockhash",
						"in": "path",
						"description": "the hash of the block to mark as precious",
						"required": true,
						"type": "string",
						"example": "00000000000000000108641af52e01a447b1f9d801571f93a0f20a8cbf80c236"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid precious block input"
					}
				}
			}
		},
		"/blockchain/pruneBlockchain/{height}": {
			"post": {
				"tags": [
					"blockchain"
				],
				"summary": "Prune blockchain",
				"description": "Prune blockchain by height.",
				"operationId": "pruneBlockchain",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "height",
						"in": "path",
						"description": "The block height to prune up to. May be set to a discrete height, or a unix timestamp to prune blocks whose block time is at least 2 hours older than the provided timestamp.",
						"required": true,
						"type": "number",
						"example": 500000
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Cannot prune blocks because node is not in prune mode."
					}
				}
			}
		},
		"/blockchain/verifyChain": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Verify blockchain.",
				"description": "Verifies blockchain database.",
				"operationId": "verifyChain",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "checklevel",
						"in": "query",
						"description": "how thorough the block verification is.",
						"required": false,
						"type": "number",
			      "default": 3
					},
					{
						"name": "nblocks",
						"in": "query",
						"description": "the number of blocks to check.",
						"required": false,
						"type": "number",
			      "default": 6
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/VerifyChain"
						}
					}
				}
			}
		},
		"/blockchain/verifyTxOutProof/{proof}": {
			"get": {
				"tags": [
					"blockchain"
				],
				"summary": "Verify that a proof points to a transaction in a block",
				"description": "Verifies that a proof points to a transaction in a block, returning the transaction it commits to and throwing an RPC error if the block is not in our best chain",
				"operationId": "verifyTxOutProof",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "proof",
						"in": "path",
						"description": "The hex-encoded proof generated by gettxoutproof",
						"required": true,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid tag value"
					}
				}
			}
		},
		"/control/getInfo": {
			"get": {
				"tags": [
					"control"
				],
				"summary": "Various state info.",
				"description": "Returns an object containing various state info.",
				"operationId": "getInfo",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/Info"
						}
					}
				}
			}
		},
		"/control/getMemoryInfo": {
			"get": {
				"tags": [
					"control"
				],
				"summary": "Information about memory usage.",
				"description": "Returns an object containing information about memory usage.",
				"operationId": "placeOrder",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/MemoryInfo"
						}
					}
				}
			}
		},
		"/generating/generateToAddress/{nblocks}/{address}": {
			"post": {
				"tags": [
					"generating"
				],
				"summary": "Mine blocks immediately to a specified address",
				"description": "mine blocks immediately to a specified address (before the RPC call returns)",
				"operationId": "generateToAddress",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"name": "nblocks",
						"in": "path",
						"description": "how many blocks are generated immediately.",
						"required": true,
						"type": "number",
						"default": 1
					},
					{
						"name": "address",
						"in": "path",
						"description": "the address to send the newly generated bitcoin to.",
						"required": true,
						"type": "string",
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c"
					},
					{
						"name": "maxtries",
						"in": "query",
						"description": "how many iterations to try",
						"required": false,
						"type": "number",
						"default": 100
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Invalid command"
					}
				}
			}
		},
		"/mining/getBlockTemplate/{templateRequest}": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Returns data needed to construct a block",
				"description": "If the request parameters include a 'mode' key, that is used to explicitly select between the default 'template' request or a 'proposal'. It returns data needed to construct a block to work on",
				"operationId": "getBlockTemplate",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "templateRequest",
						"description": "a json object",
						"required": false,
						"type": "string",
						"default": "{}"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Block template not found"
					}
				}
			}
		},
		"/mining/getMiningInfo": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Returns a json object containing mining-related information.",
				"description": "",
				"operationId": "getMiningInfo",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/MiningInfo"
						}
					}
				}
			}
		},
		"/mining/getNetworkHashps": {
			"get": {
				"tags": [
					"mining"
				],
				"summary": "Estimated network hashes per second",
				"description": "Returns the estimated network hashes per second based on the last n blocks. Pass in [blocks] to override # of blocks, -1 specifies since last difficulty change. Pass in [height] to estimate the network speed at the time when a certain block was found.",
				"operationId": "getNetworkHashps",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "query",
						"name": "nblocks",
						"description": "the number of blocks, or -1 for blocks since last difficulty change.",
						"required": false,
						"default": 120,
						"type": "number"
					},
					{
						"in": "query",
						"name": "height",
						"description": "to estimate at the time of the given height.",
						"required": false,
						"default": 1,
						"type": "number"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/NetworkHashps"
						}
					}
				}
			}
		},
		"/mining/submitBlock/{hex}": {
			"post": {
				"tags": [
					"mining"
				],
				"summary": "Submit new block to network.",
				"description": "attempts to submit new block to network.",
				"operationId": "submitBlock",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "the hex-encoded block data to submit",
						"required": true,
						"type": "string"
					},
					{
						"in": "query",
						"name": "parameters",
						"description": "object of optional parameters",
						"required": false,
						"type": "string"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Block decode failed"
					}
				}
			}
		},
		"/network/getConnectionCount": {
			"get": {
				"tags": [
					"network"
				],
				"summary": "Number of connections.",
				"description": "returns the number of connections to other nodes.",
				"operationId": "getConnectionCount",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
						  "$ref": "#/definitions/ConnectionCount"
						}
					}
				}
			}
		},
		"/network/getNetTotals": {
			"get": {
				"tags": [
					"network"
				],
				"summary": "Information about network traffic",
				"description": "returns information about network traffic, including bytes in, bytes out, and current time.",
				"operationId": "getNetTotals",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GetNetTotals"
						}
					}
				}
			}
		},
		"/network/getNetworkInfo": {
			"get": {
				"tags": [
					"network"
				],
				"summary": "Various state info regarding P2P networking.",
				"description": "Returns an object containing various state info regarding P2P networking.",
				"operationId": "getNetworkInfo",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GetNetworkInfo"
						}
					}
				}
			}
		},
		"/network/getPeerInfo": {
			"get": {
				"tags": [
					"network"
				],
				"summary": "Data about each connected network node.",
				"description": "returns data about each connected network node as a json array of objects.",
				"operationId": "getPeerInfo",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GetPeerInfo"
						}
					}
				}
			}
		},
		"/network/ping": {
			"get": {
				"tags": [
					"network"
				],
				"summary": "Requests that a ping be sent to all other nodes to measure ping time",
				"description": "Results provided in getpeerinfo, pingtime and pingwait fields are decimal seconds. Ping command is handled in queue with all other commands, so it measures processing backlog, not just network ping.",
				"operationId": "ping",
				"produces": [
					"application/json"
				],
				"responses": {
					"200": {
						"description": "successful operation"
					}
				}
			}
		},
		"/rawtransactions/decodeRawTransaction/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the hex encoded transaction.",
				"description": "Return a JSON object representing the serialized, hex-encoded transaction.",
				"operationId": "decodeRawTransaction",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The transaction hex string",
						"required": true,
						"type": "string",
						"example": "01000000013ba3edfd7a7b12b27ac72c3e67768f617fc81bc3888a51323a9fb8aa4b1e5e4a000000006a4730440220540986d1c58d6e76f8f05501c520c38ce55393d0ed7ed3c3a82c69af04221232022058ea43ed6c05fec0eccce749a63332ed4525460105346f11108b9c26df93cd72012103083dfc5a0254613941ddc91af39ff90cd711cdcde03a87b144b883b524660c39ffffffff01807c814a000000001976a914d7e7c4e0b70eaa67ceff9d2823d1bbb9f6df9a5188ac00000000"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/DecodeRawTransaction"
						}
					},
					"400": {
						"description": "TX decode failed"
					}
				}
			}
		},
		"/rawtransactions/decodeScript/{hex}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Decode a hex-encoded script.",
				"description": "Decode a hex-encoded script.",
				"operationId": "decodeScript",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The hex encoded script",
						"required": true,
						"type": "string",
						"example": "4830450221009a51e00ec3524a7389592bc27bea4af5104a59510f5f0cfafa64bbd5c164ca2e02206c2a8bbb47eabdeed52f17d7df668d521600286406930426e3a9415fe10ed592012102e6e1423f7abde8b70bca3e78a7d030e5efabd3eb35c19302542b5fe7879c1a16"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/DecodeScript"
						}
					},
					"400": {
						"description": "Argument must be hexadecimal string"
					}
				}
			}
		},
		"/rawtransactions/getRawTransaction/{txid}": {
			"get": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Return the raw transaction data.",
				"description": "return the raw transaction data. If verbose is 'true', returns an Object with information about 'txid'. If verbose is 'false' or omitted, returns a string that is serialized, hex-encoded data for 'txid'.",
				"operationId": "getRawTransaction",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "The transaction id",
						"required": true,
						"type": "string",
						"example": "0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098"
					},
					{
						"in": "query",
						"name": "verbose",
						"description": "If false, return a string, otherwise return a json object",
						"required": true,
						"type": "boolean",
						"default": false
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/GetRawTransaction"
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/rawtransactions/sendRawTransaction/{hex}": {
			"post": {
				"tags": [
					"rawtransactions"
				],
				"summary": "Submits raw transaction to local node and network.",
				"description": "Submits raw transaction (serialized, hex-encoded) to local node and network. Also see createrawtransaction and signrawtransaction calls.",
				"operationId": "sendRawTransaction",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "hex",
						"description": "The hex string of the raw transaction",
						"required": true,
						"type": "string",
						"example": "01000000010000000000000000000000000000000000000000000000000000000000000000ffffffff0704ffff001d0104ffffffff0100f2052a0100000043410496b538e853519c726a2c91e61ec11600ae1390813a627c66fb8be7947be63c52da7589379515d4e0a604f8141781e62294721166bf621e73a82cbf2342c858eeac00000000"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation"
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/transaction/details/{txid}": {
			"get": {
				"tags": [
					"transaction"
				],
				"summary": "Transaction details",
				"description": "Details about a transaction",
				"operationId": "transactionDetails",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "txid",
						"description": "single txid or url encoded array of txids",
						"required": true,
						"type": "string",
						"example": "0e3e2357e806b6cdb1f70b54c3a3a17b6714ee1f0e68bebb44a74b1efd512098"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/TransactionDetails"
						}
					},
					"400": {
						"description": "Transaction not found"
					}
				}
			}
		},
		"/util/validateAddress/{address}": {
			"get": {
				"tags": [
					"util"
				],
				"summary": "Information about the given bitcoin address.",
				"description": "Return information about the given bitcoin address.",
				"operationId": "validateAddress",
				"produces": [
					"application/json"
				],
				"parameters": [
					{
						"in": "path",
						"name": "address",
						"description": "The bitcoin address to validate",
						"required": true,
						"type": "string",
						"example": "bitcoincash:qzs02v05l7qs5s24srqju498qu55dwuj0cx5ehjm2c"
					}
				],
				"responses": {
					"200": {
						"description": "successful operation",
						"schema": {
							"$ref": "#/definitions/ValidateAddress"
						}
					},
					"400": {
						"description": "Invalid Address"
					}
				}
			}
		}
	},
	"definitions": {
		"AddressDetails": {
			"type": "object",
			"properties": {
			  "balance": {
					"type": "number",
					"format": "float"
				},
			  "balanceSat": {
					"type": "number",
					"format": "float"
				},
			  "totalReceived": {
					"type": "number",
					"format": "float"
				},
			  "totalReceivedSat": {
					"type": "number",
					"format": "float"
				},
			  "totalSent": {
					"type": "number",
					"format": "float"
				},
			  "totalSentSat": {
					"type": "number",
					"format": "float"
				},
			  "unconfirmedBalance": {
					"type": "number",
					"format": "float"
				},
			  "unconfirmedBalanceSat": {
					"type": "number",
					"format": "float"
				},
			  "unconfirmedTxApperances": {
					"type": "number",
					"format": "float"
				},
			  "txApperances": {
					"type": "number"
				},
			  "transactions": {
					"type": "array",
					"items": {
						"type": "string"
					}
				},
			  "legacyAddress": {
					"type": "string"
				},
			  "cashAddress": {
					"type": "string"
				}
			}
		},
		"AddressUtxo": {
			"type": "array",
			"items": {
			  "$ref": "#/definitions/Utxo"
			}
		},
	  "Utxo": {
			"type": "object",
			"properties": {
			  "txid": {
					"type": "string"
				},
			  "vout": {
					"type": "number"
				},
			  "scriptPubKey": {
					"type": "string"
				},
			  "amount": {
					"type": "number",
					"format": "float"
				},
			  "satoshis": {
					"type": "number"
				},
			  "height": {
					"type": "number"
				},
			  "confirmations": {
					"type": "number"
				},
			  "legacyAddress": {
					"type": "string"
				},
			  "cashAddress": {
					"type": "string"
				}
			}
		},
		"AddressUnconfirmed": {
			"type": "array",
			"items": {
			  "$ref": "#/definitions/Unconfirmed"
			}
		},
	  "Unconfirmed": {
			"type": "object",
			"properties": {
			  "txid": {
					"type": "string"
				},
			  "vout": {
					"type": "number"
				},
			  "scriptPubKey": {
					"type": "string"
				},
			  "amount": {
					"type": "number",
					"format": "float"
				},
			  "satoshis": {
					"type": "number"
				},
			  "height": {
					"type": "number"
				},
			  "confirmations": {
					"type": "number"
				},
			  "legacyAddress": {
					"type": "string"
				},
			  "cashAddress": {
					"type": "string"
				}
			}
		},
	  "BlockDetails": {
			"type": "object",
			"properties": {
			  "hash": {
					"type": "string"
				},
			  "size": {
					"type": "number"
				},
			  "height": {
					"type": "number"
				},
			  "version": {
					"type": "number"
				},
			  "merkleroot": {
					"type": "string"
				},
			  "tx": {
					"type": "array",
					"items": {
					  "type": "string"
					}
				},
			  "time": {
					"type": "number"
				},
			  "nonce": {
					"type": "number"
				},
			  "bits": {
					"type": "string"
				},
			  "difficulty": {
					"type": "number",
					"format": "float"
				},
			  "chainwork": {
					"type": "string"
				},
			  "confirmations": {
					"type": "number"
				},
			  "previousblockhash": {
					"type": "string"
				},
			  "nextblockhash": {
					"type": "string"
				},
			  "reward": {
					"type": "number",
					"format": "float"
				},
			  "isMainChain": {
					"type": "boolean"
				},
			  "poolInfo": {
					"type": "object",
			    "properties": {
						"poolName": "string",
						"url": "string"
					}
				}
			}
		},
	  "BestBlockHash": {
			"type": "string"
		},
	  "Block": {
			"type": "object",
			"properties": {
			  "hash": {
					"type": "string"
				},
			  "confirmations": {
					"type": "number"
				},
			  "size": {
					"type": "number"
				},
			  "height": {
					"type": "number"
				},
			  "version": {
					"type": "number"
				},
			  "versionHex": {
					"type": "string"
				},
			  "merkleroot": {
					"type": "string"
				},
			  "tx": {
					"type": "array",
					"items": {
					  "type": "string"
					}
				},
			  "time": {
					"type": "number"
				},
			  "mediantime": {
					"type": "number"
				},
			  "nonce": {
					"type": "number"
				},
			  "bits": {
					"type": "string"
				},
			  "difficulty": {
					"type": "number",
					"format": "float"
				},
			  "chainwork": {
					"type": "string"
				},
			  "previousblockhash": {
					"type": "string"
				},
			  "nextblockhash": {
					"type": "string"
				}
			}
		},
	  "BlockchainInfo": {
			"type": "object",
			"properties": {
			  "chain": {
					"type": "string"
				},
			  "blocks": {
					"type": "number"
				},
			  "headers": {
					"type": "number"
				},
			  "bestblockhash": {
					"type": "string"
				},
			  "difficulty": {
					"type": "number",
					"format": "float"
				},
			  "mediantime": {
					"type": "number"
				},
			  "verificationprogress": {
					"type": "number",
					"format": "float"
				},
			  "chainwork": {
					"type": "string"
				},
			  "pruned": {
					"type": "boolean"
				},
			  "softforks": {
					"type": "array",
					"items": {
						"type": "object",
				    "properties": {
							"id": "string",
							"version": "number",
							"reject": {
					      "type": "object",
						    "properties": {
									"status": "boolean"
								}
							}
						}
					}
				},
			  "bip9_softforks": {
					"type": "object",
			    "properties": {
						"status": "string",
						"startTime": "number",
						"timeout": "number",
						"since": "number"
					}
				}
			}
		},
	  "BlockCount": {
			"type": "number"
		},
	  "BlockHash": {
			"type": "string"
		},
	  "BlockHeader": {
			"type": "object",
	    "properties": {
			  "hash": {
					"type": "string"
				},
			  "confirmations": {
					"type": "number"
				},
			  "height": {
					"type": "number"
				},
			  "version": {
					"type": "number"
				},
			  "versionHex": {
					"type": "string"
				},
			  "merkleroot": {
					"type": "string"
				},
			  "time": {
					"type": "number"
				},
			  "mediantime": {
					"type": "number"
				},
			  "nonce": {
					"type": "number"
				},
			  "bits": {
					"type": "string"
				},
			  "difficulty": {
					"type": "number",
					"format": "float"
				},
			  "chainwork": {
					"type": "string"
				},
			  "previousblockhash": {
					"type": "string"
				},
			  "nextblockhash": {
					"type": "string"
				}
			}
		},
	  "Difficulty": {
			"type": "number",
			"format": "float"
		},
	  "MempoolInfo": {
			"type": "object",
	    "properties": {
			  "size": {
					"type": "number"
				},
			  "bytes": {
					"type": "number"
				},
			  "usage": {
					"type": "number"
				},
			  "maxmempool": {
					"type": "number"
				},
			  "mempoolminfee": {
					"type": "number"
				}
			}
		},
	  "RawMempool": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
	  "VerifyChain": {
			"type": "boolean"
		},
		"GetNetTotals": {
			"type": "object",
			"properties": {
				"totalbytesrecv": {
					"type": "number"
				},
				"totalbytessent": {
					"type": "number"
				},
				"timemillis": {
					"type": "number"
				},
				"uploadtarget": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"timeframe": {
								"type": "number"
							},
							"target": {
								"type": "number"
							},
							"target_reached": {
								"type": "boolean"
							},
							"serve_historical_blocks": {
								"type": "boolean"
							},
							"proxy_randomize_credentials": {
								"type": "number"
							},
							"time_left_in_cycle": {
								"type": "number"
							}
						}
					}
				}
			}
		},
		"GetNetworkInfo": {
			"type": "object",
			"properties": {
				"version": {
					"type": "number"
				},
				"subversion": {
					"type": "string"
				},
				"protocolversion": {
					"type": "number"
				},
				"localservices": {
					"type": "number"
				},
				"localrelay": {
					"type": "boolean"
				},
				"timeoffset": {
					"type": "number"
				},
				"networkactive": {
					"type": "boolean"
				},
				"connections": {
					"type": "number"
				},
				"networks": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"name": {
								"type": "string"
							},
							"limited": {
								"type": "boolean"
							},
							"reachable": {
								"type": "boolean"
							},
							"proxy": {
								"type": "string"
							},
							"proxy_randomize_credentials": {
								"type": "boolean"
							}
						}
					}
				},
				"relayfee": {
					"type": "number"
				},
				"incrementalfee": {
					"type": "number"
				},
				"localaddresses": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"address": {
								"type": "string"
							},
							"port": {
								"type": "number"
							},
							"score": {
								"type": "number"
							}
						}
					}
				},
				"warnings": {
					"type": "string"
				}
			}
		},
		"GetPeerInfo": {
			"type": "object",
			"properties": {
				"id": {
					"type": "number"
				},
				"addr": {
					"type": "string"
				},
				"addrlocal": {
					"type": "string"
				},
				"services": {
					"type": "number"
				},
				"relaytxes": {
					"type": "boolean"
				},
				"lastsend": {
					"type": "number"
				},
				"lastrecv": {
					"type": "number"
				},
				"bytessent": {
					"type": "number"
				},
				"bytesrecv": {
					"type": "number"
				},
				"conntime": {
					"type": "number"
				},
				"timeoffset": {
					"type": "number"
				},
				"pingtime": {
					"type": "number"
				},
				"minping": {
					"type": "number"
				},
				"version": {
					"type": "number"
				},
				"subver": {
					"type": "string"
				},
				"inbound": {
					"type": "boolean"
				},
				"addnode": {
					"type": "boolean"
				},
				"startingheight": {
					"type": "number"
				},
				"banscore": {
					"type": "number"
				},
				"synced_headers": {
					"type": "number"
				},
				"synced_blocks": {
					"type": "number"
				},
				"inflight": {
					"type": "array"
				},
				"whitelist": {
					"type": "boolean"
				},
				"bytessent_per_msg": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"addr": {
								"type": "number"
							},
							"feefilter": {
								"type": "number"
							},
							"inv": {
								"type": "number"
							},
							"ping": {
								"type": "number"
							},
							"pong": {
								"type": "number"
							},
							"sendcmpct": {
								"type": "number"
							},
							"sendheaders": {
								"type": "number"
							},
							"verack": {
								"type": "number"
							},
							"version": {
								"type": "string"
							}
						}
					}
				},
				"bytesrecv_per_msg": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"addr": {
								"type": "number"
							},
							"ping": {
								"type": "number"
							},
							"pong": {
								"type": "number"
							},
							"verack": {
								"type": "number"
							},
							"version": {
								"type": "string"
							}
						}
					}
				}
			}
		},
		"DecodeRawTransaction": {
			"type": "object",
			"properties": {
				"txid": {
					"type": "string"
				},
				"hash": {
					"type": "string"
				},
				"size": {
					"type": "number"
				},
				"version": {
					"type": "number"
				},
				"vin": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"txid": {
								"type": "string"
							},
							"vout": {
								"type": "number"
							},
							"scriptSig": {
								"type": "object",
								"properties":{
									"asm": {
										"type": "string"
									},
									"hex": {
										"type": "string"
									}
								}
							},
							"sequence": {
								"type": "string"
							}
						}
					}
				},
				"vout": {
					"type": "array",
					"items":{
						"type": "object",
						"properties": {
							"value":{
								"type": "number"
							},
							"n": {
								"type": "number"
							},
							"scriptPubkey": {
								"type": "object",
								"properties": {
									"asm": {
										"type": "string"
									},
									"hex": {
										"type": "string"
									},
									"reqSigs": {
										"type": "number"
									},
									"type": {
										"type": "string"
									},
									"addresses": {
										"type": "array",
										"items": {
											"address": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				}
			}
		},
		"DecodeScript": {
			"type": "object",
			"properties": {
				"asm": {
					"type": "string"
				},
				"type": {
					"type": "string"
				},
				"p2sh": {
					"type": "string"
				}
			}
		},
		"GetRawTransaction": {
			"type": "object",
			"properties": {
				"hex": {
					"type": "string"
				},
				"txid": {
					"type": "string"
				},
				"hash": {
					"type": "string"
				},
				"size": {
					"type": "number"
				},
				"version": {
					"type": "number"
				},
				"vin": {
					"type": "array",
					"items": {
						"type": "object",
						"properties": {
							"txid": {
								"type": "string"
							},
							"vout": {
								"type": "number"
							},
							"scriptSig": {
								"type": "object",
								"properties":{
									"asm": {
										"type": "string"
									},
									"hex": {
										"type": "string"
									},
									"sequence": {
										"type": "string"
									}
								}
							}
						}
					}
				},
				"vout": {
					"type": "array",
					"items":{
						"type": "object",
						"properties": {
							"value":{
								"type": "number"
							},
							"n": {
								"type": "number"
							},
							"scriptPubkey": {
								"type": "object",
								"properties": {
									"asm": {
										"type": "string"
									},
									"hex": {
										"type": "string"
									},
									"reqSigs": {
										"type": "number"
									},
									"type": {
										"type": "string"
									},
									"addresses": {
										"type": "array",
										"items": {
											"address": {
												"type": "string"
											}
										}
									}
								}
							}
						}
					}
				},
				"blockhash": {
					"type": "string"
				},
				"confirmations": {
					"type": "number"
				},
				"time": {
					"type": "number"
				},
				"blocktime": {
					"type": "number"
				}
			}
		},
		"TransactionDetails": {
			"type": "object",
			"properties": {
				"txid": {
					"type": "string"
				},
				"version": {
					"type": "number"
				},
				"locktime": {
						"type": "number"
				},
				"vin": {
					"type": "array",
					"items": {
							"type": "object",
							"properties": {
								"txid": {
									"type": "string"
								},
								"vout": {
									"type": "number"
								},
								"sequence": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptSig": {
									"type": "object",
									"properties": {
										"hex": {
											"type": "string"
										},
										"asm": {
											"type": "string"
										},
										"value": {
											"type": "number"
										},
										"legacyAddress": {
											"type": "string"
										},
										"cashAddress": {
											"type": "string"
										}
									}
								}
							}
					}
				},
				"vout": {
					"type": "array",
					"items": {
						"objects": {
							"type": "object",
							"properties": {
								"value": {
									"type": "number"
								},
								"n": {
									"type": "number"
								},
								"scriptPubkey": {
									"type": "object",
									"properties": {
										"hex": {
											"type": "string"
										},
										"asm": {
											"type": "string"
										},
										"addresses": {
											"type": "array",
											"items": {
												"address": {
													"type": "string"
												}
											}
										},
										"type": {
											"type": "string"
										}
									}
								},
								"spentTxId": {
									"type": "string"
								},
								"spentIndex": {
									"type": "number"
								},
								"spentHeight": {
									"type": "number"
								}
							}
						},
						"type": "object",
						"properties": {
							"value": {
								"type": "number"
							},
							"n": {
								"type": "number"
							},
							"scriptPubkey": {
								"type": "object",
								"properties": {
									"hex": {
										"type": "string"
									},
									"asm": {
										"type": "string"
									}
								}
							},
							"spentTxId": {
								"type": "string"
							},
							"spentIndex": {
								"type": "number"
							},
							"spentHeight": {
								"type": "number"
							}
						}
					}
				},
				"blockhash": {
					"type": "string"
				},
				"blockheight": {
					"type": "number"
				},
				"confirmations": {
					"type": "number"
				},
				"time": {
					"type": "number"
				},
				"valueOut": {
					"type": "number"
				},
				"size": {
					"type": "number"
				},
				"valueIn": {
					"type": "number"
				},
				"fees": {
					"type": "number"
				}
			}
		},
	  "ValidateAddress": {
			"type": "object",
			"properties": {
			  "isvalid": {
					"type": "boolean"
				},
			  "address": {
					"type": "string"
				},
			  "scriptPubKey": {
					"type": "string"
				},
			  "ismine": {
					"type": "boolean"
				},
			  "iswatchonly": {
					"type": "boolean"
				},
			  "isscript": {
					"type": "boolean"
				}
			}
		},
	  "Info": {
			"type": "object",
			"properties": {
			  "version": {
					"type": "number"
				},
			  "protocolversion": {
					"type": "number"
				},
			  "blocks": {
					"type": "number"
				},
			  "timeoffset": {
					"type": "number"
				},
			  "connections": {
					"type": "number"
				},
			  "proxy": {
					"type": "string"
				},
			  "difficulty": {
					"type": "number",
					"format": "float"
				},
			  "paytxfee": {
					"type": "number"
				},
			  "relayfee": {
					"type": "number",
					"format": "float"
				},
			  "errors": {
					"type": "string"
				}
			}
		},
	  "MemoryInfo": {
			"type": "object",
			"properties": {
			  "locked": {
					"type": "object",
					"properties": {
					  "used": {
							"type": "number"
						},
					  "free": {
							"type": "number"
						},
					  "total": {
							"type": "number"
						},
					  "locked": {
							"type": "number"
						},
					  "chunks_used": {
							"type": "number"
						},
					  "chunks_free": {
							"type": "number"
						}
					}
				}
			}
		},
	  "MiningInfo": {
			"type": "object",
			"properties": {
				"blocks": {
					"type": "number"
				},
				"currentblocksize": {
					"type": "number"
				},
				"currentblocktx": {
					"type": "number"
				},
			  "difficulty": {
					"type": "number",
					"format": "float"
				},
				"blockprioritypercentage": {
					"type": "number"
				},
				"errors": {
					"type": "string"
				},
				"networkhashps": {
					"type": "number"
				},
				"pooledtx": {
					"type": "number"
				},
				"chain": {
					"type": "string"
				}
			}
		},
	  "NetworkHashps": {
			"type": "number"
		},
	  "ConnectionCount": {
			"type": "number"
		},
	  "MempoolAncestors": {
			"type": "array",
			"items": {
				"type": "string"
			}
		},
	  "MempoolDescendants": {
			"type": "array",
			"items": {
				"type": "string"
			}
		}
	}
}
